Directory: myproject

Directory Structure:
```
.
.
├── ./.DS_Store
├── ./.env
├── ./.git
│   ├── ./.git/COMMIT_EDITMSG
│   ├── ./.git/FETCH_HEAD
│   ├── ./.git/HEAD
│   ├── ./.git/ORIG_HEAD
│   ├── ./.git/config
│   ├── ./.git/description
│   ├── ./.git/hooks
│   │   ├── ./.git/hooks/applypatch-msg.sample
│   │   ├── ./.git/hooks/commit-msg.sample
│   │   ├── ./.git/hooks/fsmonitor-watchman.sample
│   │   ├── ./.git/hooks/post-update.sample
│   │   ├── ./.git/hooks/pre-applypatch.sample
│   │   ├── ./.git/hooks/pre-commit.sample
│   │   ├── ./.git/hooks/pre-merge-commit.sample
│   │   ├── ./.git/hooks/pre-push.sample
│   │   ├── ./.git/hooks/pre-rebase.sample
│   │   ├── ./.git/hooks/pre-receive.sample
│   │   ├── ./.git/hooks/prepare-commit-msg.sample
│   │   ├── ./.git/hooks/push-to-checkout.sample
│   │   ├── ./.git/hooks/sendemail-validate.sample
│   │   └── ./.git/hooks/update.sample
│   ├── ./.git/index
│   ├── ./.git/info
│   │   └── ./.git/info/exclude
│   ├── ./.git/logs
│   │   ├── ./.git/logs/HEAD
│   │       ├── ./.git/logs/refs/heads
│   │       │   ├── ./.git/logs/refs/heads/lab2
│   │       │   ├── ./.git/logs/refs/heads/lab3
│   │       │   └── ./.git/logs/refs/heads/master
│   │           └── ./.git/logs/refs/remotes/origin
│   │               ├── ./.git/logs/refs/remotes/origin/lab2
│   │               └── ./.git/logs/refs/remotes/origin/master
│   │   ├── ./.git/objects/00
│   │   │   └── ./.git/objects/00/483d5ec5c90a7493480d0d4f8fb95b70fd6cb9
│   │   ├── ./.git/objects/03
│   │   │   ├── ./.git/objects/03/06c7898674d62df916b948c82cb3ba5136d02f
│   │   │   └── ./.git/objects/03/c73f84aeb9947f830f86e438c420c1bbf1e355
│   │   ├── ./.git/objects/07
│   │   │   └── ./.git/objects/07/803bd682bae71b420f72353954f1dbdc0be9ae
│   │   ├── ./.git/objects/0b
│   │   │   └── ./.git/objects/0b/9a9840c0fd1de3606b1dbb9feed84e140a7817
│   │   ├── ./.git/objects/11
│   │   │   └── ./.git/objects/11/5ddf850c2903c29e33e7878848f7769c7f4c27
│   │   ├── ./.git/objects/13
│   │   │   └── ./.git/objects/13/ac7ea9e2e24154aced08123fc54e350634e9b8
│   │   ├── ./.git/objects/18
│   │   │   ├── ./.git/objects/18/37362069a680a8b030b3428c4b0f7defb8b561
│   │   │   └── ./.git/objects/18/b3ee277e9bdbd1c8928d0ddff4cb8955dadddf
│   │   ├── ./.git/objects/1e
│   │   │   └── ./.git/objects/1e/9e9cba1486aafff4ca58774704dcc4f32e3c07
│   │   ├── ./.git/objects/1f
│   │   │   └── ./.git/objects/1f/81da72f8824bcba8ccf31b5c5ad95a4fb1a8df
│   │   ├── ./.git/objects/35
│   │   │   └── ./.git/objects/35/46dd6d21a68122de2679fd2343bb5824fabdca
│   │   ├── ./.git/objects/37
│   │   │   └── ./.git/objects/37/ad245ff76f3319c33a10a6d5d8049b3c4c6ae3
│   │   ├── ./.git/objects/3c
│   │   │   └── ./.git/objects/3c/f56642e00c9edb0be84689f948c18f64e63779
│   │   ├── ./.git/objects/40
│   │   │   └── ./.git/objects/40/864c324b87c86c9d295b33ecc8869047039cc8
│   │   ├── ./.git/objects/47
│   │   │   └── ./.git/objects/47/6940fbc00b410c268a302439a49111b1aaace2
│   │   ├── ./.git/objects/58
│   │   │   └── ./.git/objects/58/bf5f3460a5f3320b8d20a9fe0be5fc59762d8c
│   │   ├── ./.git/objects/5e
│   │   │   └── ./.git/objects/5e/110b35b0fe7aec9a180087ee93a45017f41e26
│   │   ├── ./.git/objects/65
│   │   │   └── ./.git/objects/65/63c10798bbacdfb3b6505ccc78fef7f78fa3a2
│   │   ├── ./.git/objects/67
│   │   │   └── ./.git/objects/67/49dbe127ee2e51b4cf74bbf42ed724c75a074e
│   │   ├── ./.git/objects/69
│   │   │   └── ./.git/objects/69/4323fa4c8382f9effc636c7062ef168bb62da2
│   │   ├── ./.git/objects/6d
│   │   │   └── ./.git/objects/6d/3380a2899f2c1bec86c1cf83b54101fbbd816c
│   │   ├── ./.git/objects/70
│   │   │   └── ./.git/objects/70/489a751315c53915643fbf218ee48eb631d988
│   │   ├── ./.git/objects/72
│   │   │   └── ./.git/objects/72/1ecd9990b3b9d1ea854889bd7b4c97f0325af2
│   │   ├── ./.git/objects/7c
│   │   │   └── ./.git/objects/7c/e503c2dd97ba78597f6ff6e4393132753573f6
│   │   ├── ./.git/objects/7f
│   │   │   └── ./.git/objects/7f/185e89fda41a5b0b87d86118e896da88fa9908
│   │   ├── ./.git/objects/88
│   │   │   └── ./.git/objects/88/2376e6621817dd93c7980d79c28054ec745b0b
│   │   ├── ./.git/objects/8c
│   │   │   └── ./.git/objects/8c/70c63c94ddd31dd3b8aea91e78b2048384a8b6
│   │   ├── ./.git/objects/8d
│   │   │   └── ./.git/objects/8d/6a81a8fe657a357bc3b0f9c388a4ec7dc628a3
│   │   ├── ./.git/objects/92
│   │   │   ├── ./.git/objects/92/635602aaa35b2f12492d77b9a8e9aebcef7cf9
│   │   │   └── ./.git/objects/92/bb9a3b2d3b0672cabcfad26835e94407fe1347
│   │   ├── ./.git/objects/95
│   │   │   └── ./.git/objects/95/658e04874c53c81ee40724cfb791af3ba6faa2
│   │   ├── ./.git/objects/9a
│   │   │   └── ./.git/objects/9a/c8685c11c6367bf93ecf8de86c205f15847c24
│   │   ├── ./.git/objects/9c
│   │   │   └── ./.git/objects/9c/6f1e69cc3008aab265982464af294cbfe9322e
│   │   ├── ./.git/objects/a2
│   │   │   └── ./.git/objects/a2/424b9496965175a997042641b086aee0488237
│   │   ├── ./.git/objects/ac
│   │   │   └── ./.git/objects/ac/6845a8e5a504e9ad187e388e9b65d52369c7fb
│   │   ├── ./.git/objects/af
│   │   │   └── ./.git/objects/af/a5742895552f8549c25e8f8e10ceb9535fd52f
│   │   ├── ./.git/objects/b0
│   │   │   └── ./.git/objects/b0/d0b1c4a7266b82059580f8900ab18773e13f03
│   │   ├── ./.git/objects/c1
│   │   │   └── ./.git/objects/c1/901223c27ebed7f12bd4e3eb6cd4e02477122a
│   │   ├── ./.git/objects/c6
│   │   │   ├── ./.git/objects/c6/3e50e2aa260a6dae0172ea1d74a104b121112f
│   │   │   └── ./.git/objects/c6/88e01f53fb3e419e435a5648c33dcafeae37cd
│   │   ├── ./.git/objects/c8
│   │   │   └── ./.git/objects/c8/67ad5cf746a55692ca23171083b18ba9ce4bcb
│   │   ├── ./.git/objects/cb
│   │   │   ├── ./.git/objects/cb/37ab6a60e7ebb497859b36b73fc7b4e525a373
│   │   │   └── ./.git/objects/cb/3d6310e8ccccfc04ba23117679b00bbd6db34e
│   │   ├── ./.git/objects/d2
│   │   │   └── ./.git/objects/d2/1a5f88f15602613df88fa1e398e994044b08ac
│   │   ├── ./.git/objects/db
│   │   │   └── ./.git/objects/db/42944db97488f56c1faeb3bdb13a3dbdc2d75f
│   │   ├── ./.git/objects/de
│   │   │   └── ./.git/objects/de/65bca72ccf6772ed1bf04977d2d913ab55e365
│   │   ├── ./.git/objects/e6
│   │   │   └── ./.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   │   ├── ./.git/objects/e8
│   │   │   └── ./.git/objects/e8/0c4a77a961a478959d3ab968d48aa2714be03e
│   │   ├── ./.git/objects/e9
│   │   │   └── ./.git/objects/e9/b3d0e1208a8cbf9976f970b84871b023af88fd
│   │   ├── ./.git/objects/ed
│   │   │   └── ./.git/objects/ed/327d22f5ad028ff7fae6c967945e1da8438a82
│   │   ├── ./.git/objects/f1
│   │   │   └── ./.git/objects/f1/fd6b9909fd99af730d7f3f28da64d83722dc61
│   │   ├── ./.git/objects/fd
│   │   │   ├── ./.git/objects/fd/6c8b95ce1b8f6147ac841e98ff66ecb73153e4
│   │   │   └── ./.git/objects/fd/a01c2d548fcb41da17195f4ddef7b24c0238ad
│   │   ├── ./.git/objects/ff
│   │   │   └── ./.git/objects/ff/ffa7dbb005aafbcb08a19373d15d6014c15149
│       ├── ./.git/refs/heads
│       │   ├── ./.git/refs/heads/lab2
│       │   ├── ./.git/refs/heads/lab3
│       │   └── ./.git/refs/heads/master
│       │   └── ./.git/refs/remotes/origin
│       │       ├── ./.git/refs/remotes/origin/lab2
│       │       └── ./.git/refs/remotes/origin/master
├── ./app
│   ├── ./app/__init__.py
│   ├── ./app/admin.py
│   ├── ./app/apps.py
│   ├── ./app/context_processors.py
│   ├── ./app/filters.py
│   ├── ./app/forms.py
│   ├── ./app/migrations
│   │   ├── ./app/migrations/0001_initial.py
│   │   ├── ./app/migrations/0002_alter_appuser_age_alter_employee_age_and_more.py
│   │   └── ./app/migrations/__init__.py
│   ├── ./app/models.py
│   ├── ./app/serializers.py
│   ├── ./app/templates
│   │   ├── ./app/templates/add_employee.html
│   │   ├── ./app/templates/add_user.html
│   │   ├── ./app/templates/base.html
│   │   ├── ./app/templates/employee_detail.html
│   │   ├── ./app/templates/employee_list.html
│   │   ├── ./app/templates/index.html
│   │   ├── ./app/templates/set_role.html
│   │   ├── ./app/templates/user_detail.html
│   │   └── ./app/templates/user_list.html
│   ├── ./app/templatetags
│   │   ├── ./app/templatetags/__init__.py
│   │   └── ./app/templatetags/app_extras.py
│   ├── ./app/tests.py
│   ├── ./app/urls.py
│   └── ./app/views.py
├── ./manage.py
│   ├── ./media/answer_images
│   │   └── ./media/answer_images/4eb2b2b6962f9815f60feb4c27c84cd0.jpg
│   └── ./media/question_images
│       ├── ./media/question_images/photo_2024-10-16_17-27-22.jpg
│       ├── ./media/question_images/question1.jpg
│       ├── ./media/question_images/question2.jpg
│       ├── ./media/question_images/question3.jpg
│       └── ./media/question_images/question4.jpg
└── ./myproject
    ├── ./myproject/__init__.py
    ├── ./myproject/asgi.py
    ├── ./myproject/settings.py
    ├── ./myproject/urls.py
    └── ./myproject/wsgi.py
```

Contents of .DS_Store:
```
[Could not decode file contents]

```

Contents of .env:
```
DB_ENGINE=django.db.backends.postgresql
DB_NAME=DB2
DB_USER=postgres
DB_PASSWORD=
DB_HOST=localhost
DB_PORT=5432

```

Contents of manage.py:
```
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

Contents of app/models.py:
```
# app/models.py
from django.db import models
from django.core.exceptions import ValidationError

class AppUser(models.Model):
    id = models.AutoField(primary_key=True, db_column='ID')
    full_name = models.CharField(max_length=255, db_column='Full Name')
    email = models.EmailField(max_length=254, unique=True, db_column='Email')
    age = models.PositiveIntegerField(db_column='Age')

    class Meta:
        db_table = 'User'  # Имя таблицы в БД остаётся 'User'
        verbose_name = 'Пользователь'
        verbose_name_plural = 'Пользователи'

    def clean(self):
        if self.age <= 0:
            raise ValidationError({'age': 'Возраст должен быть положительным числом.'})

class Employee(models.Model):
    id = models.AutoField(primary_key=True, db_column='ID')
    full_name = models.CharField(max_length=255, db_column='Full Name')
    years_of_experience = models.PositiveIntegerField(db_column='Years of Experience')
    position = models.CharField(max_length=255, db_column='Position')
    salary = models.DecimalField(max_digits=10, decimal_places=2, db_column='Salary')
    age = models.PositiveIntegerField(db_column='Age')
    photo = models.BinaryField(null=True, blank=True, db_column='Photo')

    class Meta:
        db_table = 'Employee'
        verbose_name = 'Сотрудник'
        verbose_name_plural = 'Сотрудники'

    def clean(self):
        errors = {}
        if self.age <= 0:
            errors['age'] = 'Возраст должен быть положительным числом.'
        if self.years_of_experience < 0:
            errors['years_of_experience'] = 'Стаж работы не может быть отрицательным.'
        if self.salary < 0:
            errors['salary'] = 'Зарплата не может быть отрицательной.'
        if self.years_of_experience > self.age:
            errors['years_of_experience'] = 'Стаж работы не может превышать возраст.'
        if errors:
            raise ValidationError(errors)

```

Contents of app/serializers.py:
```
# app/serializers.py
from rest_framework import serializers

class UserSerializer(serializers.Serializer):
    ID = serializers.IntegerField()
    Full_Name = serializers.CharField(max_length=255, source='Full Name')
    Email = serializers.EmailField()
    Age = serializers.IntegerField()

class EmployeeSerializer(serializers.Serializer):
    ID = serializers.IntegerField()
    Full_Name = serializers.CharField(max_length=255, source='Full Name')
    Years_of_Experience = serializers.IntegerField(source='Years of Experience')
    Position = serializers.CharField(max_length=255)
    Salary = serializers.DecimalField(max_digits=10, decimal_places=2)
    Age = serializers.IntegerField()
    Photo = serializers.CharField(allow_null=True, required=False)

```

Contents of app/__init__.py:
```

```

Contents of app/apps.py:
```
from django.apps import AppConfig


class AppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'app'

```

Contents of app/forms.py:
```
# myapp/forms.py
from django import forms

class SetRoleForm(forms.Form):
    ROLE_CHOICES = [
        ('user', 'User'),
        ('admin', 'Admin'),
    ]
    role = forms.ChoiceField(choices=ROLE_CHOICES)

```

Contents of app/context_processors.py:
```
# app/context_processors.py

def add_role_and_user_id(request):
    return {
        'role': request.session.get('role', 'user'),
        'user_id': request.session.get('user_id', ''),
        'employee_id': request.session.get('employee_id', None),
    }

```

Contents of app/admin.py:
```
from django.contrib import admin

```

Contents of app/tests.py:
```
from django.test import TestCase

# Create your tests here.

```

Contents of app/urls.py:
```
# app/urls.py

from django.urls import path
from . import views

urlpatterns = [
    # Web Views
    path('', views.index, name='index'),
    path('set_role/', views.set_role, name='set_role'),
    path('users/', views.user_list, name='user_list'),
    path('users/<int:user_id>/', views.user_detail, name='user_detail'),
    path('employees/', views.employee_list, name='employee_list'),
    path('employees/<int:employee_id>/', views.employee_detail, name='employee_detail'),
    path('users/add/', views.add_user, name='add_user'),
    path('employees/add/', views.add_employee, name='add_employee'),

    # API Views
    path('api/users/', views.UserListAPI.as_view(), name='api_user_list'),
    path('api/users/<int:user_id>/', views.UserDetailAPI.as_view(), name='api_user_detail'),
    path('api/employees/', views.EmployeeListAPI.as_view(), name='api_employee_list'),
    path('api/employees/<int:employee_id>/', views.EmployeeDetailAPI.as_view(), name='api_employee_detail'),
]

```

Contents of app/filters.py:
```
# filters.py

import django_filters

```

Contents of app/views.py:
```
# app/views.py

from django.shortcuts import render, redirect
from django.db import connection
from django.contrib import messages
from django.http import HttpResponse
from django.core.exceptions import ValidationError
from .models import AppUser, Employee
from django.views.decorators.csrf import csrf_exempt

# Добавляем импорты для DRF
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .serializers import UserSerializer, EmployeeSerializer


def index(request):
        role = request.session.get('role', 'user')
        user_id = request.session.get('user_id')
        employee_id = request.session.get('employee_id')
        return render(request, 'index.html', {'role': role, 'user_id': user_id, 'employee_id': employee_id})


def set_role(request):
    if request.method == 'POST':
        role = request.POST.get('role')
        if role in ['user', 'admin']:
            request.session['role'] = role
            if role == 'user':
                request.session['user_id'] = 1  # Замените на фактический ID пользователя
                request.session['employee_id'] = None
            else:
                # Проверяем, есть ли администратор в базе
                with connection.cursor() as cursor:
                    cursor.execute('SELECT "ID" FROM "Employee" WHERE "Position" = %s LIMIT 1', ['Administrator'])
                    row = cursor.fetchone()
                    if row:
                        employee_id = row[0]
                    else:
                        # Если нет, создаем администратора
                        cursor.execute('''
                            INSERT INTO "Employee" ("Full Name", "Years of Experience", "Position", "Salary", "Age")
                            VALUES (%s, %s, %s, %s, %s) RETURNING "ID"
                        ''', ['Admin', 0, 'Administrator', 0.00, 30])
                        employee_id = cursor.fetchone()[0]
                request.session['employee_id'] = employee_id
                request.session['user_id'] = None
            messages.success(request, f'Роль установлена: {role}')
        else:
            messages.error(request, 'Неверная роль')
        return redirect('index')
    else:
        return render(request, 'set_role.html')




def user_list(request):
    role = request.session.get('role', 'user')
    if role != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    request.session['last_page'] = request.get_full_path()
    page_size = 10
    page_number = int(request.GET.get('page', 1))
    offset = (page_number - 1) * page_size

    with connection.cursor() as cursor:
        cursor.execute('SELECT COUNT(*) FROM "User"')
        total_users = cursor.fetchone()[0]

        cursor.execute('SELECT * FROM "User" ORDER BY "ID" LIMIT %s OFFSET %s', [page_size, offset])
        columns = [col[0] for col in cursor.description]
        app_users = [dict(zip(columns, row)) for row in cursor.fetchall()]

    total_pages = (total_users + page_size - 1) // page_size

    return render(request, 'user_list.html', {
        'app_users': app_users,
        'role': role,
        'page_number': page_number,
        'total_pages': total_pages
    })


def user_detail(request, user_id):
    role = request.session.get('role', 'user')
    session_user_id = request.session.get('user_id')

    # Проверяем права доступа
    if role != 'admin' and session_user_id != user_id:
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    with connection.cursor() as cursor:
        cursor.execute('SELECT * FROM "User" WHERE "ID" = %s', [user_id])
        row = cursor.fetchone()
        if row:
            columns = [col[0] for col in cursor.description]
            app_user = dict(zip(columns, row))
        else:
            return HttpResponse('Пользователь не найден', status=404)

    if request.method == 'POST':
        full_name = request.POST.get('full_name')
        email = request.POST.get('email')
        age = int(request.POST.get('age'))

        # Создание экземпляра модели для валидации
        app_user_instance = AppUser(
            id=user_id,
            full_name=full_name,
            email=email,
            age=age
        )

        try:
            # Валидация данных
            app_user_instance.full_clean()

            # Обновление данных в базе
            with connection.cursor() as cursor:
                cursor.execute('''
                    UPDATE "User"
                    SET "Full Name" = %s, "Email" = %s, "Age" = %s
                    WHERE "ID" = %s
                ''', [full_name, email, age, user_id])

            messages.success(request, 'Данные пользователя обновлены')
            return redirect('user_detail', user_id=user_id)
        except ValidationError as e:
            # Передача ошибок в шаблон
            errors = e.message_dict
            return render(request, 'user_detail.html', {
                'app_user': app_user,
                'role': role,
                'errors': errors
            })

    return render(request, 'user_detail.html', {'app_user': app_user, 'role': role})


def employee_list(request):
    role = request.session.get('role', 'user')
    if role != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    request.session['last_page'] = request.get_full_path()
    page_size = 10
    page_number = int(request.GET.get('page', 1))
    offset = (page_number - 1) * page_size

    with connection.cursor() as cursor:
        cursor.execute('SELECT COUNT(*) FROM "Employee"')
        total_employees = cursor.fetchone()[0]

        cursor.execute('SELECT * FROM "Employee" ORDER BY "ID" LIMIT %s OFFSET %s', [page_size, offset])
        columns = [col[0] for col in cursor.description]
        employees = [dict(zip(columns, row)) for row in cursor.fetchall()]

    total_pages = (total_employees + page_size - 1) // page_size

    return render(request, 'employee_list.html', {
        'employees': employees,
        'role': role,
        'page_number': page_number,
        'total_pages': total_pages
    })


def employee_detail(request, employee_id):
    role = request.session.get('role', 'user')
    session_employee_id = request.session.get('employee_id')

    # Проверяем права доступа
    if role != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)


    with connection.cursor() as cursor:
        cursor.execute('SELECT * FROM "Employee" WHERE "ID" = %s', [employee_id])
        row = cursor.fetchone()
        if row:
            columns = [col[0] for col in cursor.description]
            employee = dict(zip(columns, row))
        else:
            return HttpResponse('Сотрудник не найден', status=404)

    if request.method == 'POST':
        full_name = request.POST.get('full_name')
        years_of_experience = int(request.POST.get('years_of_experience'))
        position = request.POST.get('position')
        salary = float(request.POST.get('salary'))
        age = int(request.POST.get('age'))
        photo = request.FILES.get('photo')

        # Создание экземпляра модели для валидации
        employee_instance = Employee(
            id=employee_id,
            full_name=full_name,
            years_of_experience=years_of_experience,
            position=position,
            salary=salary,
            age=age,
            photo=photo.read() if photo else employee.get('Photo')
        )

        try:
            # Валидация данных
            employee_instance.full_clean()

            # Обновление данных в базе
            with connection.cursor() as cursor:
                if photo:
                    cursor.execute('''
                        UPDATE "Employee"
                        SET "Full Name" = %s, "Years of Experience" = %s, "Position" = %s,
                            "Salary" = %s, "Age" = %s, "Photo" = %s
                        WHERE "ID" = %s
                    ''', [full_name, years_of_experience, position, salary, age, employee_instance.photo, employee_id])
                else:
                    cursor.execute('''
                        UPDATE "Employee"
                        SET "Full Name" = %s, "Years of Experience" = %s, "Position" = %s,
                            "Salary" = %s, "Age" = %s
                        WHERE "ID" = %s
                    ''', [full_name, years_of_experience, position, salary, age, employee_id])

            messages.success(request, 'Данные профиля обновлены')
            return redirect('employee_detail', employee_id=employee_id)
        except ValidationError as e:
            # Передача ошибок в шаблон
            errors = e.message_dict
            return render(request, 'employee_detail.html', {
                'employee': employee,
                'role': role,
                'errors': errors
            })

    return render(request, 'employee_detail.html', {'employee': employee, 'role': role})


def add_user(request):
    role = request.session.get('role', 'user')
    if role != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    if request.method == 'POST':
        full_name = request.POST.get('full_name')
        email = request.POST.get('email')
        age = int(request.POST.get('age'))

        # Создание экземпляра модели для валидации
        app_user_instance = AppUser(
            full_name=full_name,
            email=email,
            age=age
        )

        try:
            # Валидация данных
            app_user_instance.full_clean()

            # Вставка данных в базу
            with connection.cursor() as cursor:
                cursor.execute('''
                    INSERT INTO "User" ("Full Name", "Email", "Age")
                    VALUES (%s, %s, %s)
                ''', [full_name, email, age])

            messages.success(request, 'Новый пользователь добавлен')
            return redirect('user_list')
        except ValidationError as e:
            errors = e.message_dict
            return render(request, 'add_user.html', {'errors': errors})

    return render(request, 'add_user.html')


def add_employee(request):
    role = request.session.get('role', 'user')
    if role != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    if request.method == 'POST':
        full_name = request.POST.get('full_name')
        years_of_experience = int(request.POST.get('years_of_experience'))
        position = request.POST.get('position')
        salary = float(request.POST.get('salary'))
        age = int(request.POST.get('age'))
        photo = request.FILES.get('photo')

        employee_instance = Employee(
            full_name=full_name,
            years_of_experience=years_of_experience,
            position=position,
            salary=salary,
            age=age,
            photo=photo.read() if photo else None
        )

        try:
            employee_instance.full_clean()

            with connection.cursor() as cursor:
                cursor.execute('''
                    INSERT INTO "Employee" ("Full Name", "Years of Experience", "Position", "Salary", "Age", "Photo")
                    VALUES (%s, %s, %s, %s, %s, %s)
                ''', [full_name, years_of_experience, position, salary, age, employee_instance.photo])

            messages.success(request, 'Новый сотрудник добавлен')
            return redirect('employee_list')
        except ValidationError as e:
            errors = e.message_dict
            return render(request, 'add_employee.html', {'errors': errors})

    return render(request, 'add_employee.html')


# API Views

class UserListAPI(APIView):
    def get(self, request):
        with connection.cursor() as cursor:
            cursor.execute('SELECT * FROM "User"')
            columns = [col[0] for col in cursor.description]
            app_users = [dict(zip(columns, row)) for row in cursor.fetchall()]
        serializer = UserSerializer(app_users, many=True)
        return Response(serializer.data)


class UserDetailAPI(APIView):
    def get(self, request, user_id):
        with connection.cursor() as cursor:
            cursor.execute('SELECT * FROM "User" WHERE "ID" = %s', [user_id])
            row = cursor.fetchone()
            if row:
                columns = [col[0] for col in cursor.description]
                app_user = dict(zip(columns, row))
                serializer = UserSerializer(app_user)
                return Response(serializer.data)
            else:
                return Response({'error': 'Пользователь не найден'}, status=status.HTTP_404_NOT_FOUND)


class EmployeeListAPI(APIView):
    def get(self, request):
        with connection.cursor() as cursor:
            cursor.execute('SELECT * FROM "Employee"')
            columns = [col[0] for col in cursor.description]
            employees = [dict(zip(columns, row)) for row in cursor.fetchall()]
        serializer = EmployeeSerializer(employees, many=True)
        return Response(serializer.data)


class EmployeeDetailAPI(APIView):
    def get(self, request, employee_id):
        with connection.cursor() as cursor:
            cursor.execute('SELECT * FROM "Employee" WHERE "ID" = %s', [employee_id])
            row = cursor.fetchone()
            if row:
                columns = [col[0] for col in cursor.description]
                employee = dict(zip(columns, row))
                serializer = EmployeeSerializer(employee)
                return Response(serializer.data)
            else:
                return Response({'error': 'Сотрудник не найден'}, status=status.HTTP_404_NOT_FOUND)

```

Contents of app/templatetags/__init__.py:
```

```

Contents of app/templatetags/app_extras.py:
```
# app/templatetags/app_extras.py
from django import template
import base64

register = template.Library()

@register.filter
def b64encode(value):
    return base64.b64encode(value).decode('utf-8')

@register.filter
def to(value, arg):
    return range(value, arg+1)

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)

```

Contents of app/migrations/0002_alter_appuser_age_alter_employee_age_and_more.py:
```
# Generated by Django 4.2.16 on 2024-11-21 18:29

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='appuser',
            name='age',
            field=models.PositiveIntegerField(db_column='Age'),
        ),
        migrations.AlterField(
            model_name='employee',
            name='age',
            field=models.PositiveIntegerField(db_column='Age'),
        ),
        migrations.AlterField(
            model_name='employee',
            name='years_of_experience',
            field=models.PositiveIntegerField(db_column='Years of Experience'),
        ),
    ]

```

Contents of app/migrations/__init__.py:
```

```

Contents of app/migrations/0001_initial.py:
```
# Generated by Django 4.2.16 on 2024-11-21 17:42

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('full_name', models.CharField(db_column='Full Name', max_length=255)),
                ('email', models.EmailField(db_column='Email', max_length=254, unique=True)),
                ('age', models.IntegerField(db_column='Age')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('full_name', models.CharField(db_column='Full Name', max_length=255)),
                ('years_of_experience', models.IntegerField(db_column='Years of Experience')),
                ('position', models.CharField(db_column='Position', max_length=255)),
                ('salary', models.DecimalField(db_column='Salary', decimal_places=2, max_digits=10)),
                ('age', models.IntegerField(db_column='Age')),
                ('photo', models.BinaryField(blank=True, db_column='Photo', null=True)),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
                'db_table': 'Employee',
            },
        ),
    ]

```

Contents of app/templates/add_employee.html:
```
<!-- app/templates/add_employee.html -->
{% extends 'base.html' %}
{% block content %}
<h1>Добавить сотрудника</h1>

{% if errors %}
    <div class="alert alert-danger">
        <ul>
            {% for field, error_list in errors.items %}
                {% for error in error_list %}
                    <li>{{ error }}</li>
                {% endfor %}
            {% endfor %}
        </ul>
    </div>
{% endif %}

<form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    <div class="form-group">
        <label for="full_name">Полное имя</label>
        <input type="text" class="form-control" id="full_name" name="full_name" required>
    </div>
    <div class="form-group">
        <label for="years_of_experience">Стаж работы</label>
        <input type="number" class="form-control" id="years_of_experience" name="years_of_experience" required>
    </div>
    <div class="form-group">
        <label for="position">Должность</label>
        <input type="text" class="form-control" id="position" name="position" required>
    </div>
    <div class="form-group">
        <label for="salary">Зарплата</label>
        <input type="number" step="0.01" class="form-control" id="salary" name="salary" required>
    </div>
    <div class="form-group">
        <label for="age">Возраст</label>
        <input type="number" class="form-control" id="age" name="age" required>
    </div>
    <div class="form-group">
        <label for="photo">Фотография</label>
        <input type="file" class="form-control-file" id="photo" name="photo">
    </div>
    <button type="submit" class="btn btn-primary">Добавить сотрудника</button>
</form>
{% endblock %}

```

Contents of app/templates/employee_list.html:
```
<!-- app/templates/employee_list.html -->
{% extends 'base.html' %}
{% load app_extras %}

{% block content %}
<h1>Список сотрудников</h1>
{% if role == 'admin' %}
    <a href="{% url 'add_employee' %}" class="btn btn-primary mb-3">Добавить сотрудника</a>
{% endif %}
<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col" title="ID сотрудника">ID</th>
            <th scope="col" title="Полное имя сотрудника">ФИО</th>
            <th scope="col" title="Должность сотрудника">Должность</th>
            <th scope="col" title="Стаж работы (в годах)">Стаж (лет)</th>
            <th scope="col" title="Зарплата сотрудника">Зарплата</th>
            <th scope="col" title="Возраст сотрудника">Возраст</th>
            <th scope="col">Действия</th>
        </tr>
    </thead>
    <tbody>
    {% for employee in employees %}
        <tr>
            <td>{{ employee.ID }}</td>
            <td>{{ employee|get_item:"Full Name" }}</td>
            <td>{{ employee.Position }}</td>
            <td>{{ employee|get_item:"Years of Experience" }}</td>
            <td>{{ employee.Salary }}</td>
            <td>{{ employee.Age }}</td>
            <td>
                <a href="{% url 'employee_detail' employee.ID %}" class="btn btn-sm btn-info">Просмотр/Редактирование</a>
            </td>
        </tr>
    {% endfor %}
    </tbody>
</table>

<!-- Пагинация -->
<nav aria-label="Навигация по страницам">
    <ul class="pagination">
        {% if page_number > 1 %}
            <li class="page-item">
                <a class="page-link" href="?page={{ page_number|add:'-1' }}" aria-label="Предыдущая">
                    <span aria-hidden="true">&laquo; Предыдущая</span>
                </a>
            </li>
        {% endif %}
        {% for p in 1|to:total_pages %}
            <li class="page-item {% if p == page_number %}active{% endif %}">
                <a class="page-link" href="?page={{ p }}">{{ p }}</a>
            </li>
        {% endfor %}
        {% if page_number < total_pages %}
            <li class="page-item">
                <a class="page-link" href="?page={{ page_number|add:'1' }}" aria-label="Следующая">
                    <span aria-hidden="true">Следующая &raquo;</span>
                </a>
            </li>
        {% endif %}
    </ul>
</nav>
{% endblock %}

```

Contents of app/templates/index.html:
```
<!-- app/templates/index.html -->
{% extends 'base.html' %}

{% block content %}
<h1>Добро пожаловать в приложение</h1>
<p>Вы вошли как <strong>{{ role }}</strong>.</p>
{% endblock %}

```

Contents of app/templates/base.html:
```
<!-- app/templates/base.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Моё приложение</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Навигационное меню -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="{% url 'index' %}">Моё приложение</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
          aria-controls="navbarNav" aria-expanded="false" aria-label="Переключить навигацию">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item {% if request.resolver_match.url_name == 'index' %}active{% endif %}">
                    <a class="nav-link" href="{% url 'index' %}">Главная</a>
                </li>
                {% if role == 'admin' %}
                    <li class="nav-item {% if request.resolver_match.url_name == 'user_list' %}active{% endif %}">
                        <a class="nav-link" href="{% url 'user_list' %}">Пользователи</a>
                    </li>
                    <li class="nav-item {% if request.resolver_match.url_name == 'employee_list' %}active{% endif %}">
                        <a class="nav-link" href="{% url 'employee_list' %}">Сотрудники</a>
                    </li>
                {% elif role == 'user' %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'user_detail' user_id %}">Мой профиль</a>
                    </li>
                {% endif %}
            </ul>
            <ul class="navbar-nav ml-auto">
                {% if role == 'admin' %}
                    <li class="nav-item">
                        {% if employee_id %}
                            <a class="nav-link" href="{% url 'employee_detail' employee_id %}">Редактировать профиль</a>
                        {% else %}
                            <!-- Если employee_id не установлен -->
                            <a class="nav-link" href="{% url 'set_role' %}">Установить профиль</a>
                        {% endif %}
                    </li>
                {% endif %}
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'set_role' %}">Сменить роль</a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Контент -->
    <div class="container mt-4">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-info">{{ message }}</div>
            {% endfor %}
        {% endif %}
        {% block content %}{% endblock %}
    </div>

    <!-- Bootstrap JS и зависимости -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>

```

Contents of app/templates/user_detail.html:
```
<!-- app/templates/user_detail.html -->
{% extends 'base.html' %}
{% load app_extras %}

{% block content %}
<h1>Детали пользователя</h1>

{% if errors %}
    <div class="alert alert-danger">
        <ul>
            {% for field, error_list in errors.items %}
                {% for error in error_list %}
                    <li>{{ error }}</li>
                {% endfor %}
            {% endfor %}
        </ul>
    </div>
{% endif %}

<form method="post">
    {% csrf_token %}
    <div class="form-group">
        <label for="full_name" title="Введите полное имя">Полное имя</label>
        <input type="text" class="form-control" id="full_name" name="full_name" value="{{ app_user|get_item:'Full Name' }}">
    </div>
    <div class="form-group">
        <label for="email" title="Введите email">Email</label>
        <input type="email" class="form-control" id="email" name="email" value="{{ app_user.Email }}">
    </div>
    <div class="form-group">
        <label for="age" title="Введите возраст">Возраст</label>
        <input type="number" class="form-control" id="age" name="age" value="{{ app_user.Age }}">
    </div>
    <button type="submit" class="btn btn-primary">Сохранить</button>
</form>
{% endblock %}

```

Contents of app/templates/add_user.html:
```
<!-- app/templates/add_user.html -->
{% extends 'base.html' %}
{% block content %}
<h1>Добавить пользователя</h1>

{% if errors %}
    <div class="alert alert-danger">
        <ul>
            {% for field, error_list in errors.items %}
                {% for error in error_list %}
                    <li>{{ error }}</li>
                {% endfor %}
            {% endfor %}
        </ul>
    </div>
{% endif %}

<form method="post">
    {% csrf_token %}
    <div class="form-group">
        <label for="full_name">Полное имя</label>
        <input type="text" class="form-control" id="full_name" name="full_name" required>
    </div>
    <div class="form-group">
        <label for="email">Электронная почта</label>
        <input type="email" class="form-control" id="email" name="email" required>
    </div>
    <div class="form-group">
        <label for="age">Возраст</label>
        <input type="number" class="form-control" id="age" name="age" required>
    </div>
    <button type="submit" class="btn btn-primary">Добавить пользователя</button>
</form>
{% endblock %}

```

Contents of app/templates/employee_detail.html:
```
<!-- app/templates/employee_detail.html -->
{% extends 'base.html' %}
{% load app_extras %}

{% block content %}
<h1>Детали сотрудника</h1>

{% if errors %}
    <div class="alert alert-danger">
        <ul>
            {% for field, error_list in errors.items %}
                {% for error in error_list %}
                    <li>{{ error }}</li>
                {% endfor %}
            {% endfor %}
        </ul>
    </div>
{% endif %}

<form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    <div class="form-group">
        <label for="full_name" title="Введите полное имя">Полное имя</label>
        <input type="text" class="form-control" id="full_name" name="full_name" value="{{ employee|get_item:'Full Name' }}">
    </div>
    <div class="form-group">
        <label for="years_of_experience" title="Введите стаж работы">Стаж работы</label>
        <input type="number" class="form-control" id="years_of_experience" name="years_of_experience" value="{{ employee|get_item:'Years of Experience' }}">
    </div>
    <div class="form-group">
        <label for="position" title="Введите должность">Должность</label>
        <input type="text" class="form-control" id="position" name="position" value="{{ employee.Position }}">
    </div>
    <div class="form-group">
        <label for="salary" title="Введите зарплату">Зарплата</label>
        <input type="number" class="form-control" id="salary" name="salary" value="{{ employee.Salary }}">
    </div>
    <div class="form-group">
        <label for="age" title="Введите возраст">Возраст</label>
        <input type="number" class="form-control" id="age" name="age" value="{{ employee.Age }}">
    </div>
    <div class="form-group">
        <label for="photo" title="Загрузите фотографию">Фотография</label>
        {% if employee.Photo %}
            <img src="data:image/png;base64,{{ employee.Photo|b64encode }}" alt="Фотография сотрудника" class="img-thumbnail" style="max-width: 200px;">
        {% endif %}
        <input type="file" class="form-control-file" id="photo" name="photo">
    </div>
    <button type="submit" class="btn btn-primary">Сохранить</button>
</form>
{% endblock %}

```

Contents of app/templates/set_role.html:
```
<!-- app/templates/set_role.html -->
{% extends 'base.html' %}

{% block content %}
<h2>Установить роль</h2>
<form method="post">
    {% csrf_token %}
    <div class="form-group">
        <label for="role">Выберите роль:</label>
        <select class="form-control" id="role" name="role">
            <option value="user" {% if role == 'user' %}selected{% endif %}>Пользователь</option>
            <option value="admin" {% if role == 'admin' %}selected{% endif %}>Администратор</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Установить роль</button>
</form>
{% endblock %}

```

Contents of app/templates/user_list.html:
```
<!-- app/templates/user_list.html -->
{% extends 'base.html' %}
{% load app_extras %}

{% block content %}
<h1>Список пользователей</h1>
{% if role == 'admin' %}
    <a href="{% url 'add_user' %}" class="btn btn-primary mb-3">Добавить пользователя</a>
{% endif %}
<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col" title="ID пользователя">ID</th>
            <th scope="col" title="Полное имя пользователя">ФИО</th>
            <th scope="col" title="Email пользователя">Email</th>
            <th scope="col" title="Возраст пользователя">Возраст</th>
            <th scope="col">Действия</th>
        </tr>
    </thead>
    <tbody>
    {% for app_user in app_users %}
        <tr>
            <td>{{ app_user.ID }}</td>
            <td>{{ app_user|get_item:"Full Name" }}</td>
            <td>{{ app_user.Email }}</td>
            <td>{{ app_user.Age }}</td>
            <td>
                <a href="{% url 'user_detail' app_user.ID %}" class="btn btn-sm btn-info">Просмотр/Редактирование</a>
            </td>
        </tr>
    {% endfor %}
    </tbody>
</table>

<!-- Пагинация -->
<nav aria-label="Навигация по страницам">
    <ul class="pagination">
        {% if page_number > 1 %}
            <li class="page-item">
                <a class="page-link" href="?page={{ page_number|add:'-1' }}" aria-label="Предыдущая">
                    <span aria-hidden="true">&laquo; Предыдущая</span>
                </a>
            </li>
        {% endif %}
        {% for p in 1|to:total_pages %}
            <li class="page-item {% if p == page_number %}active{% endif %}">
                <a class="page-link" href="?page={{ p }}">{{ p }}</a>
            </li>
        {% endfor %}
        {% if page_number < total_pages %}
            <li class="page-item">
                <a class="page-link" href="?page={{ page_number|add:'1' }}" aria-label="Следующая">
                    <span aria-hidden="true">Следующая &raquo;</span>
                </a>
            </li>
        {% endif %}
    </ul>
</nav>
{% endblock %}

```

Contents of myproject/asgi.py:
```
"""
ASGI config for myproject project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_asgi_application()

```

Contents of myproject/__init__.py:
```

```

Contents of myproject/settings.py:
```
"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8pxo2$10!u8+1@w0bb3i&%o49#)wt!t99qnetr)^3n1p7%p@!c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'bootstrap4',
    'app',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app.context_processors.add_role_and_user_id',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DB_NAME', 'DB'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}




# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'  # Перенаправление после успешного входа
LOGOUT_REDIRECT_URL = '/login/'  # Перенаправление после выхода

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
#AUTH_USER_MODEL = 'app.User'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

```

Contents of myproject/urls.py:
```
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('app.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

```

Contents of myproject/wsgi.py:
```
"""
WSGI config for myproject project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_wsgi_application()

```

Contents of media/answer_images/4eb2b2b6962f9815f60feb4c27c84cd0.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/question4.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/photo_2024-10-16_17-27-22.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/question2.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/question3.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/question1.jpg:
```
[Could not decode file contents]

```

