Directory: myproject

Directory Structure:
```
.
.
├── ./.DS_Store
├── ./.env
├── ./.git
│   ├── ./.git/COMMIT_EDITMSG
│   ├── ./.git/FETCH_HEAD
│   ├── ./.git/HEAD
│   ├── ./.git/ORIG_HEAD
│   ├── ./.git/config
│   ├── ./.git/description
│   ├── ./.git/hooks
│   │   ├── ./.git/hooks/applypatch-msg.sample
│   │   ├── ./.git/hooks/commit-msg.sample
│   │   ├── ./.git/hooks/fsmonitor-watchman.sample
│   │   ├── ./.git/hooks/post-update.sample
│   │   ├── ./.git/hooks/pre-applypatch.sample
│   │   ├── ./.git/hooks/pre-commit.sample
│   │   ├── ./.git/hooks/pre-merge-commit.sample
│   │   ├── ./.git/hooks/pre-push.sample
│   │   ├── ./.git/hooks/pre-rebase.sample
│   │   ├── ./.git/hooks/pre-receive.sample
│   │   ├── ./.git/hooks/prepare-commit-msg.sample
│   │   ├── ./.git/hooks/push-to-checkout.sample
│   │   ├── ./.git/hooks/sendemail-validate.sample
│   │   └── ./.git/hooks/update.sample
│   ├── ./.git/index
│   ├── ./.git/info
│   │   └── ./.git/info/exclude
│   ├── ./.git/logs
│   │   ├── ./.git/logs/HEAD
│   │       ├── ./.git/logs/refs/heads
│   │       │   ├── ./.git/logs/refs/heads/lab2
│   │       │   └── ./.git/logs/refs/heads/master
│   │           └── ./.git/logs/refs/remotes/origin
│   │               ├── ./.git/logs/refs/remotes/origin/lab2
│   │               └── ./.git/logs/refs/remotes/origin/master
│   │   ├── ./.git/objects/00
│   │   │   └── ./.git/objects/00/483d5ec5c90a7493480d0d4f8fb95b70fd6cb9
│   │   ├── ./.git/objects/03
│   │   │   ├── ./.git/objects/03/06c7898674d62df916b948c82cb3ba5136d02f
│   │   │   ├── ./.git/objects/03/b7d655eb9f62e00d6cb333f9f14883d06591a9
│   │   │   └── ./.git/objects/03/c73f84aeb9947f830f86e438c420c1bbf1e355
│   │   ├── ./.git/objects/05
│   │   │   └── ./.git/objects/05/28cea3ede405341796a8388d58209d03a228a7
│   │   ├── ./.git/objects/07
│   │   │   └── ./.git/objects/07/803bd682bae71b420f72353954f1dbdc0be9ae
│   │   ├── ./.git/objects/0a
│   │   │   └── ./.git/objects/0a/e4917369bfa7a954fae614c04c1ecdfec82f60
│   │   ├── ./.git/objects/0b
│   │   │   └── ./.git/objects/0b/9a9840c0fd1de3606b1dbb9feed84e140a7817
│   │   ├── ./.git/objects/11
│   │   │   └── ./.git/objects/11/5ddf850c2903c29e33e7878848f7769c7f4c27
│   │   ├── ./.git/objects/12
│   │   │   └── ./.git/objects/12/455fab691d301ee1aea95ef9a99566a049dc5c
│   │   ├── ./.git/objects/13
│   │   │   └── ./.git/objects/13/ac7ea9e2e24154aced08123fc54e350634e9b8
│   │   ├── ./.git/objects/18
│   │   │   ├── ./.git/objects/18/37362069a680a8b030b3428c4b0f7defb8b561
│   │   │   └── ./.git/objects/18/b3ee277e9bdbd1c8928d0ddff4cb8955dadddf
│   │   ├── ./.git/objects/1e
│   │   │   └── ./.git/objects/1e/9e9cba1486aafff4ca58774704dcc4f32e3c07
│   │   ├── ./.git/objects/1f
│   │   │   └── ./.git/objects/1f/81da72f8824bcba8ccf31b5c5ad95a4fb1a8df
│   │   ├── ./.git/objects/20
│   │   │   └── ./.git/objects/20/fba34f5b4f83462d01c9d8e0df5a2804d18323
│   │   ├── ./.git/objects/25
│   │   │   └── ./.git/objects/25/c7571a4e91b599be95b5a0273cba9fc34e2cbd
│   │   ├── ./.git/objects/35
│   │   │   ├── ./.git/objects/35/3d4324fd33b252e00019943d8b5b8febe904fd
│   │   │   └── ./.git/objects/35/46dd6d21a68122de2679fd2343bb5824fabdca
│   │   ├── ./.git/objects/37
│   │   │   └── ./.git/objects/37/ad245ff76f3319c33a10a6d5d8049b3c4c6ae3
│   │   ├── ./.git/objects/39
│   │   │   └── ./.git/objects/39/98072631ff25ead14b2f3c68de36154071b712
│   │   ├── ./.git/objects/3c
│   │   │   └── ./.git/objects/3c/f56642e00c9edb0be84689f948c18f64e63779
│   │   ├── ./.git/objects/40
│   │   │   └── ./.git/objects/40/864c324b87c86c9d295b33ecc8869047039cc8
│   │   ├── ./.git/objects/45
│   │   │   └── ./.git/objects/45/0a883291ce767bf07cc4fa9e4665cac23d5e3d
│   │   ├── ./.git/objects/47
│   │   │   └── ./.git/objects/47/6940fbc00b410c268a302439a49111b1aaace2
│   │   ├── ./.git/objects/53
│   │   │   └── ./.git/objects/53/e203c42b8a7dfa12e1aa3a8c5fd8b51e4fbb47
│   │   ├── ./.git/objects/58
│   │   │   └── ./.git/objects/58/bf5f3460a5f3320b8d20a9fe0be5fc59762d8c
│   │   ├── ./.git/objects/5a
│   │   │   └── ./.git/objects/5a/081d7b5ee10dbb911a5713e39a4298925d04d9
│   │   ├── ./.git/objects/5e
│   │   │   ├── ./.git/objects/5e/110b35b0fe7aec9a180087ee93a45017f41e26
│   │   │   └── ./.git/objects/5e/be97318ea17fa051255af187321683aec73e36
│   │   ├── ./.git/objects/65
│   │   │   └── ./.git/objects/65/63c10798bbacdfb3b6505ccc78fef7f78fa3a2
│   │   ├── ./.git/objects/67
│   │   │   └── ./.git/objects/67/49dbe127ee2e51b4cf74bbf42ed724c75a074e
│   │   ├── ./.git/objects/69
│   │   │   └── ./.git/objects/69/4323fa4c8382f9effc636c7062ef168bb62da2
│   │   ├── ./.git/objects/6d
│   │   │   └── ./.git/objects/6d/3380a2899f2c1bec86c1cf83b54101fbbd816c
│   │   ├── ./.git/objects/70
│   │   │   └── ./.git/objects/70/489a751315c53915643fbf218ee48eb631d988
│   │   ├── ./.git/objects/72
│   │   │   ├── ./.git/objects/72/1ecd9990b3b9d1ea854889bd7b4c97f0325af2
│   │   │   └── ./.git/objects/72/e08c75a44bfe98d8c1eeadf620521e91b1bfca
│   │   ├── ./.git/objects/74
│   │   │   ├── ./.git/objects/74/85f344efb8af5bcd4dda85b7f6688de690e939
│   │   │   └── ./.git/objects/74/db6230ee79a3b98782ee131ae5eb0b7ef5865a
│   │   ├── ./.git/objects/7c
│   │   │   └── ./.git/objects/7c/e503c2dd97ba78597f6ff6e4393132753573f6
│   │   ├── ./.git/objects/7f
│   │   │   └── ./.git/objects/7f/185e89fda41a5b0b87d86118e896da88fa9908
│   │   ├── ./.git/objects/81
│   │   │   └── ./.git/objects/81/6fcb89298b3914b38250d37dc58bfc3a5127ee
│   │   ├── ./.git/objects/88
│   │   │   └── ./.git/objects/88/2376e6621817dd93c7980d79c28054ec745b0b
│   │   ├── ./.git/objects/8b
│   │   │   └── ./.git/objects/8b/9ff878e2e77ea25d220c826a9496ce7da5ad3b
│   │   ├── ./.git/objects/8c
│   │   │   └── ./.git/objects/8c/70c63c94ddd31dd3b8aea91e78b2048384a8b6
│   │   ├── ./.git/objects/8d
│   │   │   └── ./.git/objects/8d/6a81a8fe657a357bc3b0f9c388a4ec7dc628a3
│   │   ├── ./.git/objects/8f
│   │   │   └── ./.git/objects/8f/c5481817a8bcb5009fb6040d9751a70e5f6d8b
│   │   ├── ./.git/objects/92
│   │   │   ├── ./.git/objects/92/635602aaa35b2f12492d77b9a8e9aebcef7cf9
│   │   │   └── ./.git/objects/92/bb9a3b2d3b0672cabcfad26835e94407fe1347
│   │   ├── ./.git/objects/95
│   │   │   └── ./.git/objects/95/658e04874c53c81ee40724cfb791af3ba6faa2
│   │   ├── ./.git/objects/9a
│   │   │   ├── ./.git/objects/9a/c8685c11c6367bf93ecf8de86c205f15847c24
│   │   │   └── ./.git/objects/9a/f972babaac2e59a7720f9028c43a3810a3bb1f
│   │   ├── ./.git/objects/9c
│   │   │   └── ./.git/objects/9c/6f1e69cc3008aab265982464af294cbfe9322e
│   │   ├── ./.git/objects/a2
│   │   │   └── ./.git/objects/a2/424b9496965175a997042641b086aee0488237
│   │   ├── ./.git/objects/a6
│   │   │   └── ./.git/objects/a6/6a15412f3da07497663303ab188a4347508f23
│   │   ├── ./.git/objects/a9
│   │   │   └── ./.git/objects/a9/e2557248eaa3b601a3562b41e4dd86e0ba905d
│   │   ├── ./.git/objects/ac
│   │   │   └── ./.git/objects/ac/6845a8e5a504e9ad187e388e9b65d52369c7fb
│   │   ├── ./.git/objects/af
│   │   │   └── ./.git/objects/af/a5742895552f8549c25e8f8e10ceb9535fd52f
│   │   ├── ./.git/objects/b0
│   │   │   └── ./.git/objects/b0/d0b1c4a7266b82059580f8900ab18773e13f03
│   │   ├── ./.git/objects/b6
│   │   │   └── ./.git/objects/b6/30cfb3e899a28c6288e3fe491dcc6d440f7a69
│   │   ├── ./.git/objects/b8
│   │   │   └── ./.git/objects/b8/763f4b4e9e87f726d9c2d4fef6053a8bac93a8
│   │   ├── ./.git/objects/ba
│   │   │   └── ./.git/objects/ba/069b66a91cba14f1c882c982c1d46b130994cf
│   │   ├── ./.git/objects/be
│   │   │   └── ./.git/objects/be/ba959846992d606cb500e7ee46d1dbba2f18a5
│   │   ├── ./.git/objects/c1
│   │   │   └── ./.git/objects/c1/901223c27ebed7f12bd4e3eb6cd4e02477122a
│   │   ├── ./.git/objects/c6
│   │   │   ├── ./.git/objects/c6/3e50e2aa260a6dae0172ea1d74a104b121112f
│   │   │   ├── ./.git/objects/c6/507a12afb6116b5b17adbf60b39e4d493e7d40
│   │   │   ├── ./.git/objects/c6/88207b13d3b52f5c6b522d14115e0b6fa4e7cd
│   │   │   ├── ./.git/objects/c6/88e01f53fb3e419e435a5648c33dcafeae37cd
│   │   │   └── ./.git/objects/c6/a5fe3382def732805805b7ce59a42ff9c34aaf
│   │   ├── ./.git/objects/c8
│   │   │   └── ./.git/objects/c8/67ad5cf746a55692ca23171083b18ba9ce4bcb
│   │   ├── ./.git/objects/ca
│   │   │   └── ./.git/objects/ca/d85b44c8ddfef4c7a456dcdebc4874e9380ca2
│   │   ├── ./.git/objects/cb
│   │   │   ├── ./.git/objects/cb/37ab6a60e7ebb497859b36b73fc7b4e525a373
│   │   │   └── ./.git/objects/cb/3d6310e8ccccfc04ba23117679b00bbd6db34e
│   │   ├── ./.git/objects/d2
│   │   │   └── ./.git/objects/d2/1a5f88f15602613df88fa1e398e994044b08ac
│   │   ├── ./.git/objects/d8
│   │   │   └── ./.git/objects/d8/5539118610c5a91a3b371763157a4fe220aa94
│   │   ├── ./.git/objects/db
│   │   │   ├── ./.git/objects/db/42944db97488f56c1faeb3bdb13a3dbdc2d75f
│   │   │   └── ./.git/objects/db/c5353ce3f74af2505a151431f28c21b56a781b
│   │   ├── ./.git/objects/de
│   │   │   └── ./.git/objects/de/65bca72ccf6772ed1bf04977d2d913ab55e365
│   │   ├── ./.git/objects/df
│   │   │   └── ./.git/objects/df/e73170153b7f479db31c70c663648df6a9eb5d
│   │   ├── ./.git/objects/e6
│   │   │   └── ./.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   │   ├── ./.git/objects/e8
│   │   │   ├── ./.git/objects/e8/0c4a77a961a478959d3ab968d48aa2714be03e
│   │   │   └── ./.git/objects/e8/3603f2ead938894eb18b34cfab0e21a399a25e
│   │   ├── ./.git/objects/e9
│   │   │   └── ./.git/objects/e9/b3d0e1208a8cbf9976f970b84871b023af88fd
│   │   ├── ./.git/objects/ed
│   │   │   └── ./.git/objects/ed/327d22f5ad028ff7fae6c967945e1da8438a82
│   │   ├── ./.git/objects/f1
│   │   │   └── ./.git/objects/f1/fd6b9909fd99af730d7f3f28da64d83722dc61
│   │   ├── ./.git/objects/f6
│   │   │   └── ./.git/objects/f6/26d5d0ec70a28f8ba5739afab4642213641b71
│   │   ├── ./.git/objects/fc
│   │   │   └── ./.git/objects/fc/a0122058438f92d397f5bf075f5b44b1bebc62
│   │   ├── ./.git/objects/fd
│   │   │   ├── ./.git/objects/fd/6c8b95ce1b8f6147ac841e98ff66ecb73153e4
│   │   │   └── ./.git/objects/fd/a01c2d548fcb41da17195f4ddef7b24c0238ad
│   │   ├── ./.git/objects/fe
│   │   │   └── ./.git/objects/fe/9211150e34e282aeac5dfd2c9f09b200c76e24
│   │   ├── ./.git/objects/ff
│   │   │   └── ./.git/objects/ff/ffa7dbb005aafbcb08a19373d15d6014c15149
│       ├── ./.git/refs/heads
│       │   ├── ./.git/refs/heads/lab2
│       │   └── ./.git/refs/heads/master
│       │   └── ./.git/refs/remotes/origin
│       │       ├── ./.git/refs/remotes/origin/lab2
│       │       └── ./.git/refs/remotes/origin/master
├── ./README.md
├── ./app
│   ├── ./app/__init__.py
│   ├── ./app/admin.py
│   ├── ./app/apps.py
│   ├── ./app/context_processors.py
│   ├── ./app/filters.py
│   ├── ./app/forms.py
│   ├── ./app/migrations
│   │   ├── ./app/migrations/0001_initial.py
│   │   ├── ./app/migrations/0002_appuser_is_active_employee_is_active.py
│   │   ├── ./app/migrations/0003_auto_20241127_0421.py
│   │   └── ./app/migrations/__init__.py
│   ├── ./app/models.py
│   ├── ./app/serializers.py
│   ├── ./app/templates
│   │   ├── ./app/templates/add_employee.html
│   │   ├── ./app/templates/add_user.html
│   │   ├── ./app/templates/base.html
│   │   ├── ./app/templates/employee_detail.html
│   │   ├── ./app/templates/employee_list.html
│   │   ├── ./app/templates/index.html
│   │   ├── ./app/templates/set_user.html
│   │   ├── ./app/templates/user_detail.html
│   │   └── ./app/templates/user_list.html
│   ├── ./app/templatetags
│   │   ├── ./app/templatetags/__init__.py
│   │   └── ./app/templatetags/app_extras.py
│   ├── ./app/tests.py
│   ├── ./app/urls.py
│   └── ./app/views.py
├── ./manage.py
│   ├── ./media/answer_images
│   │   └── ./media/answer_images/4eb2b2b6962f9815f60feb4c27c84cd0.jpg
│   ├── ./media/employee_photos
│   │   └── ./media/employee_photos/8dc817080af13b2aa733ea1c8ff606e6.jpg
│   └── ./media/question_images
│       ├── ./media/question_images/photo_2024-10-16_17-27-22.jpg
│       ├── ./media/question_images/question1.jpg
│       ├── ./media/question_images/question2.jpg
│       ├── ./media/question_images/question3.jpg
│       └── ./media/question_images/question4.jpg
└── ./myproject
    ├── ./myproject/__init__.py
    ├── ./myproject/asgi.py
    ├── ./myproject/settings.py
    ├── ./myproject/urls.py
    └── ./myproject/wsgi.py
```

Contents of .DS_Store:
```
[Could not decode file contents]

```

Contents of README.md:
```
# Курсовая работа по предмету Базы Данных

Представлен проект курсовой работы по предмету Базы данных

## Требования

- **Python** версии 3.8 и выше
- **PostgreSQL** для базы данных

## Установка

1. **Клонируйте репозиторий:**

    ```bash
    git clone https://github.com/VGorHub/DB_Course_Work.git
    cd myproject
    ```

2. **Создайте и активируйте виртуальное окружение:**

    ```bash
    python -m venv venv
    ```

    - **Для Linux/macOS:**

        ```bash
        source venv/bin/activate
        ```

    - **Для Windows:**

        ```bash
        venv\Scripts\activate
        ```

3. **Установите зависимости:**

    Выполните команду:

    ```bash
    pip install -r requirements.txt
    ```

## Настройка

1. **Настройте файл `.env`:**

    В корневой директории проекта создайте файл `.env` и заполните его следующими параметрами:

    ```env
    DB_ENGINE=django.db.backends.postgresql
    DB_NAME=DB2
    DB_USER=postgres
    DB_PASSWORD=ваш_пароль
    DB_HOST=localhost
    DB_PORT=5432
    ```

2. **Примените миграции базы данных:**

    ```bash
    python manage.py migrate
    ```

3. **Создайте суперпользователя для доступа к административной панели:**

    ```bash
    python manage.py createsuperuser
    ```

    Следуйте инструкциям на экране для создания учетной записи суперпользователя.

## Запуск проекта

1. **Запустите сервер разработки:**

    ```bash
    python manage.py runserver
    ```

2. **Откройте браузер и перейдите по адресу:**

    ```
    http://127.0.0.1:8000/
    ```

## Использование

- **Административная панель:**

    Доступна по адресу `http://127.0.0.1:8000/admin/`. Войдите, используя учетные данные суперпользователя.

- **API Endpoints:**

    - Список пользователей: `http://127.0.0.1:8000/api/users/`
    - Детали пользователя: `http://127.0.0.1:8000/api/users/<id>/`
    - Список сотрудников: `http://127.0.0.1:8000/api/employees/`
    - Детали сотрудника: `http://127.0.0.1:8000/api/employees/<id>/`


## Контакты

Если у вас есть вопросы или предложения, пожалуйста, свяжитесь с [vova-gorohov04@mail.ru](mailto:vova-gorohov04@mail.ru).

---

**Примечание:** Убедитесь, что PostgreSQL установлен и настроен на вашем компьютере. Создайте базу данных `DB2` или измените параметры подключения в файле `.env` согласно вашим настройкам.


# Про безопасность в Django


### Содержание

1. [Надёжное хранение паролей](#1-надежное-хранение-паролей)
   - [Хэширование паролей](#хэширование-паролей)
   - [Используемые алгоритмы хэширования](#используемые-алгоритмы-хэширования)
2. [Защита от распространённых веб-уязвимостей](#2-защита-от-распространённых-веб-уязвимостей)
   - [CSRF (Cross-Site Request Forgery)](#csrf-cross-site-request-forgery)
   - [XSS (Cross-Site Scripting)](#xss-cross-site-scripting)
   - [SQL Injection](#sql-injection)
3. [Безопасное управление сессиями](#3-безопасное-управление-сессиями)
   - [Хранение сессий](#хранение-сессий)
   - [Безопасность куки](#безопасность-куки)
4. [Гибкая система аутентификации и авторизации](#4-гибкая-система-аутентификации-и-авторизации)
   - [Пользователи и группы](#пользователи-и-группы)
   - [Разрешения](#разрешения)
5. [Регулярные обновления и поддержка сообщества](#5-Регулярные-обновления-и-поддержка-сообщества)
6. [Дополнительные меры безопасности](#6-дополнительные-мера-безопасности)
   - [SSL/HTTPS](#sslhttps)
   - [Content Security Policy (CSP)](#content-security-policy-csp)
   - [HTTP Strict Transport Security (HSTS)](#http-strict-transport-security-hsts)
   - [Защита от Clickjacking](#защита-от-clickjacking)
7. [Хранение личной информации пользователей](#7-хранение-личной-информации-пользователей)
   - [Риски хранения личных данных в общей базе](#риски-хранения-личных-данных-в-общей-базе)
   - [Меры по защите личных данных в Django](#меры-по-защите-личных-данных-в-django)
   - [Специализированные базы данных для PII](#специализированные-базы-данных-для-pii)
8. [Передача паролей в заголовках (Headers)](#8-передача-паролей-в-заголовках-headers)
9. [Контейнеризация и изоляция приложений](#9-контейнеризация-и-изоляция-приложений)
10. [Логи и аудит доступа](#10-логи-и-аудит-доступа)
11. [Заключение](#11-заключение)
12. [Ссылки на авторитетные источники](#12-ссылки-на-авторитетные-источники)

---

### 1. Надёжное хранение паролей

#### Хэширование паролей

Django использует **хэширование паролей** для обеспечения их безопасности. Вместо хранения паролей в явном виде, Django сохраняет их хэшированные версии. Хэширование — это процесс преобразования пароля в фиксированный набор символов, который невозможно обратить в исходный пароль.

**Основные преимущества хэширования:**

- **Необратимость:** Даже если злоумышленник получит доступ к хэшам, восстановление исходных паролей чрезвычайно затруднено.
- **Защита от радужных таблиц:** Использование соли (salt) делает невозможным использование предварительно вычисленных хэш-таблиц для взлома паролей.

#### Используемые алгоритмы хэширования

По умолчанию Django использует **PBKDF2** с **SHA256** в качестве хэш-функции. Однако, фреймворк поддерживает и другие алгоритмы, такие как **Argon2** и **BCrypt**. Разработчик может настроить список хэшеров в `settings.py`:

```python
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]
```

**PBKDF2** (Password-Based Key Derivation Function 2) обладает следующими характеристиками:

- **Соль:** Каждому паролю добавляется уникальная случайная строка (соль), предотвращающая атаки с использованием радужных таблиц.
- **Итерации:** Выполняется большое количество итераций хэширования (по умолчанию 260,000), что усложняет атаки методом перебора.

**Argon2** и **BCrypt** предлагают повышенную стойкость к современным атакам:

- **Argon2:** Победитель конкурса Password Hashing Competition, обеспечивает высокую степень защиты благодаря настройкам времени и памяти, что делает его устойчивым к атакам с использованием специализированного оборудования.
- **BCrypt:** Адаптивный алгоритм, который позволяет увеличивать сложность хэширования по мере роста вычислительной мощности.

**Источники:**

- [Django Documentation on Password Management](https://docs.djangoproject.com/en/stable/topics/auth/passwords/)
- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)

---

### 2. Защита от распространённых веб-уязвимостей

Django предоставляет встроенные механизмы защиты от наиболее распространённых веб-уязвимостей, соответствуя рекомендациям [OWASP Top Ten](https://owasp.org/www-project-top-ten/).

#### CSRF (Cross-Site Request Forgery)

**CSRF** — это атака, при которой злоумышленник заставляет пользователя выполнить нежелательное действие на сайте, где тот аутентифицирован.

**Механизмы защиты Django:**

- **Middleware:** `django.middleware.csrf.CsrfViewMiddleware` автоматически проверяет наличие и валидность CSRF-токена в каждом POST-запросе.
- **CSRF-токены:** В шаблонах Django используется тег `{% csrf_token %}`, который вставляет уникальный токен в формы.

**Дополнительные настройки:**

- **CSRF_COOKIE_SECURE:** Устанавливает флаг `Secure` для CSRF-куки, позволяя передавать куки только по HTTPS.
- **CSRF_COOKIE_HTTPONLY:** Предотвращает доступ к CSRF-куки через JavaScript, снижая риск XSS-атак.

**Источники:**

- [Django CSRF Protection](https://docs.djangoproject.com/en/stable/ref/csrf/)
- [OWASP CSRF Prevention](https://owasp.org/www-community/attacks/csrf)

#### XSS (Cross-Site Scripting)

**XSS** позволяет злоумышленнику внедрять вредоносные скрипты в веб-страницы, просматриваемые другими пользователями.

**Механизмы защиты Django:**

- **Экранирование вывода:** По умолчанию, все переменные в шаблонах автоматически экранируются, предотвращая внедрение вредоносных скриптов.
- **Безопасный шаблонизатор:** Использование шаблонизатора Django, который по умолчанию обрабатывает вывод данных безопасным образом.

**Дополнительные меры:**

- **Использование фильтра `|safe` только при необходимости:** Это позволяет разработчику явно указывать, какие данные могут содержать HTML-код.

**Источники:**

- [Django Template System](https://docs.djangoproject.com/en/stable/topics/templates/)
- [OWASP XSS Prevention](https://owasp.org/www-community/attacks/xss/)

#### SQL Injection

**SQL Injection** — это атака, при которой злоумышленник вставляет или изменяет SQL-запросы, выполняемые приложением, с целью получения несанкционированного доступа к данным.

**Механизмы защиты Django:**

- **ORM (Object-Relational Mapping):** Django ORM автоматически параметризует запросы, предотвращая SQL-инъекции.
- **Использование безопасных методов:** Методы, такие как `filter()`, `exclude()`, и `get()`, не позволяют напрямую внедрять SQL-код.

**Пример безопасного запроса:**

```python
from myapp.models import User
user = User.objects.filter(username=username).first()
```

В этом примере `username` автоматически экранируется, предотвращая инъекции.

**Источники:**

- [Django ORM Documentation](https://docs.djangoproject.com/en/stable/topics/db/)
- [OWASP SQL Injection Prevention](https://owasp.org/www-community/attacks/SQL_Injection)

---

### 3. Безопасное управление сессиями

#### Хранение сессий

Django предоставляет несколько способов хранения сессий:

- **Database-backed sessions:** Хранение сессий в базе данных (по умолчанию).
- **Cached sessions:** Использование кэша (например, Redis) для хранения сессий.
- **File-based sessions:** Хранение сессий в файлах на сервере.
- **Signed cookies:** Хранение данных сессии непосредственно в куках, подписанных с использованием секретного ключа.

**Настройки сессий в `settings.py`:**

```python
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # По умолчанию
```

#### Безопасность куки

Куки, используемые для управления сессиями, должны быть защищены от несанкционированного доступа и атак.

**Ключевые параметры:**

- **SESSION_COOKIE_SECURE:** Устанавливает флаг `Secure`, что позволяет передавать куки только по HTTPS.

  ```python
  SESSION_COOKIE_SECURE = True
  ```

- **SESSION_COOKIE_HTTPONLY:** Устанавливает флаг `HttpOnly`, предотвращая доступ к кукам через JavaScript, что снижает риск XSS-атак.

  ```python
  SESSION_COOKIE_HTTPONLY = True
  ```

- **SESSION_COOKIE_SAMESITE:** Устанавливает атрибут `SameSite`, предотвращая отправку куки в кросс-сайтовых запросах, что защищает от CSRF.

  ```python
  SESSION_COOKIE_SAMESITE = 'Lax'  # или 'Strict'
  ```

**Источники:**

- [Django Session Framework](https://docs.djangoproject.com/en/stable/topics/http/sessions/)
- [OWASP Session Management](https://owasp.org/www-project-cheat-sheets/cheatsheets/Session_Management_Cheat_Sheet.html)

---

### 4. Гибкая система аутентификации и авторизации

#### Пользователи и группы

Django предоставляет встроенные модели для управления пользователями и группами.

- **Модель `User`:** Включает основные атрибуты и методы для управления пользователями, такие как `username`, `password`, `email`, и т.д.
- **Группы (`Group`):** Позволяют объединять пользователей с общими правами доступа, упрощая управление разрешениями.

**Пример создания группы:**

```python
from django.contrib.auth.models import Group, Permission

# Создание новой группы
group = Group.objects.create(name='Editors')

# Добавление разрешений в группу
permission = Permission.objects.get(codename='change_article')
group.permissions.add(permission)
```

#### Разрешения

Django использует систему разрешений для управления доступом к различным частям приложения.

- **Предопределённые разрешения:** Django автоматически создаёт разрешения `add`, `change`, `delete` и `view` для каждой модели.
- **Пользовательские разрешения:** Разработчик может создавать собственные разрешения для более тонкого контроля доступа.

**Пример создания пользовательского разрешения:**

```python
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType
from myapp.models import MyModel

content_type = ContentType.objects.get_for_model(MyModel)
permission = Permission.objects.create(
    codename='can_publish',
    name='Can Publish Articles',
    content_type=content_type,
)
```

**Источники:**

- [Django Authentication Documentation](https://docs.djangoproject.com/en/stable/topics/auth/)
- [Django Permissions](https://docs.djangoproject.com/en/stable/topics/auth/default/#permissions-and-authorization)

---

### 5. Регулярные обновления и поддержка сообщества

Django активно поддерживается и регулярно обновляется с учётом новых требований безопасности. Команда разработчиков Django оперативно реагирует на выявленные уязвимости и выпускает патчи безопасности.

**Преимущества:**

- **Регулярные релизы:** Новые версии Django включают улучшения безопасности и исправления уязвимостей.
- **Активное сообщество:** Большое сообщество разработчиков и пользователей, которые участвуют в тестировании, выявлении и исправлении проблем.
- **Документация по безопасности:** Подробные руководства и рекомендации по обеспечению безопасности приложений.

**Источники:**

- [Django Security Releases](https://www.djangoproject.com/weblog/)

---

### 6. Дополнительные меры безопасности

#### SSL/HTTPS

**SSL (Secure Sockets Layer)** и **TLS (Transport Layer Security)** обеспечивают шифрование данных при передаче между клиентом и сервером, защищая их от перехвата и модификации.

**Типы сертификатов:**

- **Сертификаты DV (Domain Validation):** Проверяют только право собственности на домен.
- **Сертификаты OV (Organization Validation):** Дополнительно проверяют организацию.
- **Сертификаты EV (Extended Validation):** Предоставляют максимальный уровень доверия и отображаются зелёной строкой в браузерах.

**Рекомендуемые практики:**

- **Использование современных протоколов TLS:** TLS 1.2 и выше, избегая устаревших версий SSL и TLS.
- **Сильные шифры:** Использование современных и безопасных шифров, таких как AES-256.
- **Настройки Django для HTTPS:**

  ```python
  SECURE_SSL_REDIRECT = True  # Перенаправление всех HTTP-запросов на HTTPS
  CSRF_COOKIE_SECURE = True
  SESSION_COOKIE_SECURE = True
  ```

**Источники:**

- [Django Security Settings](https://docs.djangoproject.com/en/stable/topics/security/)
- [OWASP Transport Layer Protection](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html)

#### Content Security Policy (CSP)

**CSP** позволяет ограничить ресурсы, которые могут быть загружены на веб-страницу, снижая риск XSS и других атак.

**Настройка CSP в Django:**

Использование библиотеки `django-csp` для управления CSP-заголовками.

**Пример настройки в `settings.py`:**

```python
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", 'https://trusted.cdn.com')
CSP_STYLE_SRC = ("'self'", 'https://trusted.cdn.com')
```

**Источники:**

- [Django CSP Documentation](https://django-csp.readthedocs.io/en/latest/)
- [OWASP Content Security Policy](https://owasp.org/www-project-secure-headers/#content-security-policy-csp)

#### HTTP Strict Transport Security (HSTS)

**HSTS** заставляет браузеры автоматически использовать HTTPS для всех запросов к домену, предотвращая downgrade-атаки.

**Настройка HSTS в Django:**

```python
SECURE_HSTS_SECONDS = 31536000  # Время в секундах (1 год)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
```

**Источники:**

- [Django Security Middleware](https://docs.djangoproject.com/en/stable/ref/middleware/#module-django.middleware.security)
- [OWASP HSTS](https://owasp.org/www-project-secure-headers/#http-strict-transport-security-hsts)

#### Защита от Clickjacking

**Clickjacking** — атака, при которой пользователь обманывается для выполнения нежелательных действий на сайте через iframe.

**Механизмы защиты Django:**

- **X-Frame-Options:** Заголовок, предотвращающий отображение страниц в iframe.

**Настройка в `settings.py`:**

```python
X_FRAME_OPTIONS = 'DENY'  # Или 'SAMEORIGIN'
```

**Источники:**

- [Django Clickjacking Protection](https://docs.djangoproject.com/en/stable/ref/middleware/#django.middleware.clickjacking.XFrameOptionsMiddleware)
- [OWASP Clickjacking Defense](https://owasp.org/www-community/attacks/Clickjacking)

---

### 7. Хранение личной информации пользователей

Хранение личной информации пользователей (PII - Personally Identifiable Information) требует особого внимания к безопасности и соответствию нормативным требованиям. В этом разделе мы рассмотрим примеры мест и способов хранения PII, а также лучшие практики для обеспечения их защиты.

#### Риски хранения личных данных в общей базе

Хранение личной информации (PII) в общей базе данных может представлять следующие риски:

- **Единая точка отказа:** Утечка базы данных приведёт к компрометации всей PII.
- **Необходимость строгого контроля доступа:** Требуется ограничить доступ к базе данных только необходимыми сервисами и пользователями.
- **Соответствие нормативным требованиям:** Законодательства (например, GDPR, HIPAA) требуют соблюдения строгих мер защиты PII.

#### Меры по защите личных данных в Django

**Шифрование данных:**

- **Транзитное шифрование:** Использование HTTPS для защиты данных при передаче между клиентом и сервером.
- **Шифрование на уровне базы данных:** Использование шифрования для хранения чувствительных данных. Это может быть реализовано с помощью сторонних библиотек, таких как `django-encrypted-model-fields` или `django-fernet-fields`.

**Пример использования `django-fernet-fields`:**

1. **Установка библиотеки:**

   ```bash
   pip install django-fernet-fields
   ```

2. **Настройка ключа шифрования:**

   ```python
   # settings.py

   FERNET_KEYS = [
       'your-fernet-key-1',
       'your-fernet-key-2',  # Для ротации ключей
   ]
   ```

3. **Использование зашифрованных полей в моделях:**

   ```python
   from django.db import models
   from fernet_fields import EncryptedCharField

   class UserProfile(models.Model):
       user = models.OneToOneField(User, on_delete=models.CASCADE)
       ssn = EncryptedCharField(max_length=11)  # Зашифрованное поле для SSN
   ```

**Разделение данных:**

- **Логические разделения:** Использование отдельных моделей и приложений для хранения PII.
- **Физические разделения:** Размещение PII в отдельных базах данных или на отдельных серверах с усиленными мерами безопасности.

**Минимизация данных:**

- **Сбор только необходимых данных:** Хранение только тех данных, которые необходимы для функционирования приложения.
- **Анонимизация:** Удаление или маскирование данных, которые могут идентифицировать пользователя.

**Управление доступом:**

- **Роли и разрешения:** Использование системы разрешений Django для ограничения доступа к PII.
- **Аудит доступа:** Ведение логов доступа к чувствительным данным для мониторинга и обнаружения подозрительной активности.

**Источники:**

- [Django Encrypted Fields](https://github.com/fernet/django-fernet-fields)
- [OWASP Data Protection](https://owasp.org/www-project-data-protection/)

#### Специализированные базы данных для PII

Использование специализированных хранилищ для PII может повысить уровень безопасности, особенно для крупных и критически важных приложений.

**Хранилища секретов (Secrets Managers):**

- **AWS Secrets Manager**
- **HashiCorp Vault**

Эти сервисы предоставляют безопасное хранение конфиденциальных данных с контролем доступа и автоматическим обновлением секретов.

**Пример интеграции с HashiCorp Vault:**

```python
import hvac
from django.conf import settings

client = hvac.Client(url=settings.VAULT_URL, token=settings.VAULT_TOKEN)

# Получение секрета
secret = client.secrets.kv.v2.read_secret_version(path='pii/user_data')
user_ssn = secret['data']['data']['ssn']
```

**Изолированные базы данных:**

- **Физическая изоляция:** Размещение PII в отдельных базах данных, доступ к которым ограничен.
- **Усиленные меры безопасности:** Применение дополнительных мер защиты, таких как многофакторная аутентификация и шифрование на уровне диска.

**Источники:**

- [AWS Secrets Manager](https://aws.amazon.com/secrets-manager/)
- [HashiCorp Vault](https://www.vaultproject.io/)
- [OWASP Data Minimization](https://owasp.org/www-project-data-protection/)

---

### 8. Передача паролей в заголовках (Headers)

Передача паролей в заголовках HTTP-запросов (например, в заголовке `Authorization`) может вызывать вопросы по поводу безопасности. Однако, при соблюдении определённых условий, это безопасный метод передачи данных.

#### Почему передача пароля в заголовках безопасна

1. **Использование HTTPS:**
   - **Шифрование данных:** При использовании HTTPS все данные, включая заголовки, шифруются с помощью TLS, что предотвращает перехват и чтение данных злоумышленниками.
   - **Целостность данных:** TLS обеспечивает целостность передаваемых данных, предотвращая их модификацию в пути.

2. **Стандарты и протоколы:**
   - **Basic Authentication:** Согласно [RFC 7617](https://tools.ietf.org/html/rfc7617), пароли передаются в заголовке `Authorization` в формате Base64. Хотя Base64 не является шифрованием, использование HTTPS обеспечивает безопасность передачи.
   - **Bearer Tokens:** Использование токенов доступа в заголовках `Authorization: Bearer <token>` также безопасно при использовании HTTPS.

3. **Защита от утечек:**
   - **HttpOnly и Secure куки:** Если пароли хранятся в куках, установка флагов `HttpOnly` и `Secure` предотвращает доступ к ним через JavaScript и передачу только по HTTPS.
   - **CSP:** Использование Content Security Policy снижает риск утечек данных через XSS-атаки.

4. **Минимизация хранения паролей:**
   - **Не храните пароли:** Сервер не хранит пароли в явном виде, а только их хэшированные версии, что снижает риск утечек.

**Лучшие практики:**

- **Используйте HTTPS по умолчанию:** Обеспечьте, чтобы все запросы, особенно те, которые содержат конфиденциальные данные, передавались по защищённому каналу.
- **Избегайте передачи паролей в URL:** Параметры URL могут быть сохранены в журналах сервера или истории браузера, что повышает риск утечек.
- **Используйте токены вместо паролей:** По возможности используйте механизмы аутентификации на основе токенов (например, JWT), которые имеют ограниченный срок действия и могут быть отозваны.

**Источники:**

- [RFC 7617: The 'Basic' HTTP Authentication Scheme](https://tools.ietf.org/html/rfc7617)
- [OWASP Authentication Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html)

---

### 9. Контейнеризация и изоляция приложений

Использование контейнеров (например, Docker) и оркестраторов (например, Kubernetes) позволяет изолировать приложения и базы данных, уменьшая риски распространения угроз.

**Преимущества:**

- **Изоляция процессов:** Ограничение взаимодействия между компонентами приложения.
- **Упрощённое управление конфигурациями безопасности:** Возможность применять общие политики безопасности к контейнерам.
- **Повышенная гибкость и масштабируемость:** Лёгкость развертывания и масштабирования безопасных окружений.

**Пример Docker Compose для изолированной базы данных PII:**

```yaml
version: '3.8'

services:
  web:
    image: your_django_app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://user:password@pii_db:5432/pii_db
    depends_on:
      - pii_db

  pii_db:
    image: postgres:13
    environment:
      POSTGRES_DB: pii_db
      POSTGRES_USER: pii_user
      POSTGRES_PASSWORD: secure_password
    volumes:
      - pii_db_data:/var/lib/postgresql/data
    networks:
      - backend

volumes:
  pii_db_data:

networks:
  backend:
    driver: bridge
```

**Источники:**

- [Docker Compose Documentation](https://docs.docker.com/compose/)
- [Kubernetes Security](https://kubernetes.io/docs/concepts/security/overview/)

---

### 10. Логи и аудит доступа

Ведение детализированных логов доступа к PII и проведение регулярных аудитов помогают обнаруживать и реагировать на подозрительную активность.

**Преимущества:**

- **Обнаружение угроз:** Возможность своевременного обнаружения и реагирования на попытки несанкционированного доступа.
- **Соответствие нормативам:** Многие стандарты безопасности требуют ведения логов и проведения аудитов.
- **Прозрачность:** Повышение доверия пользователей через прозрачное управление данными.

**Реализация в Django:**

Настройка логирования в `settings.py`:

```python
# settings.py

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'pii_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/var/log/django/pii_access.log',
        },
    },
    'loggers': {
        'pii_access': {
            'handlers': ['pii_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
```

Использование логгера в коде:

```python
import logging

pii_logger = logging.getLogger('pii_access')

def access_pii(user, pii_data):
    pii_logger.info(f"User {user.id} accessed PII: {pii_data}")
    # Логика доступа к PII
```

**Источники:**

- [Django Logging Documentation](https://docs.djangoproject.com/en/stable/topics/logging/)
- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)

---

### 11. Заключение

Встроенная система авторизации Django обеспечивает высокий уровень безопасности благодаря использованию современных алгоритмов хэширования паролей, защите от распространённых веб-уязвимостей, безопасному управлению сессиями и гибкой системе аутентификации и авторизации. Дополнительные меры безопасности, такие как использование HTTPS с современными сертификатами, CSP, HSTS и другие заголовки безопасности, значительно повышают уровень защиты приложений.

Хранение личной информации пользователей в общей базе данных может быть безопасным при условии правильной конфигурации, шифрования данных, строгого контроля доступа и соблюдения лучших практик безопасности. Однако для высокочувствительных данных использование специализированных хранилищ может предоставить дополнительный уровень защиты.

**Таким образом, при правильной настройке и соблюдении рекомендаций по безопасности, встроенная система авторизации Django является надёжным и безопасным выбором для большинства проектов. Дополнительные меры безопасности, такие как использование специализированных баз данных для PII, могут быть применены в зависимости от специфических требований и уровня чувствительности данных.**

---

### 12. Ссылки на источники

1. **Django Documentation:**
   - [Security](https://docs.djangoproject.com/en/stable/topics/security/)
   - [Password Management](https://docs.djangoproject.com/en/stable/topics/auth/passwords/)
   - [Session Framework](https://docs.djangoproject.com/en/stable/topics/http/sessions/)
   - [Middleware Reference](https://docs.djangoproject.com/en/stable/ref/middleware/)
   - [Multiple Databases](https://docs.djangoproject.com/en/stable/topics/db/multi-db/)
   - [Logging](https://docs.djangoproject.com/en/stable/topics/logging/)
   
2. **OWASP (Open Web Application Security Project):**
   - [OWASP Top Ten](https://owasp.org/www-project-top-ten/)
   - [OWASP Cheat Sheets](https://cheatsheetseries.owasp.org/)
   - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
   - [OWASP Authentication Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html)
   - [OWASP Data Protection](https://owasp.org/www-project-data-protection/)
   - [OWASP Encryption Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Encryption_Cheat_Sheet.html)
   - [OWASP Clickjacking Defense](https://owasp.org/www-community/attacks/Clickjacking)
   
3. **HashiCorp Vault:**
   - [Vault Documentation](https://www.vaultproject.io/docs)
   
4. **AWS Secrets Manager:**
   - [Secrets Manager Documentation](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html)
   
5. **RFC 7617: The 'Basic' HTTP Authentication Scheme:**
   - [RFC 7617](https://tools.ietf.org/html/rfc7617)
   
6. **Django-CSP:**
   - [Django CSP Documentation](https://django-csp.readthedocs.io/en/latest/)
   
7. **django-fernet-fields:**
   - [django-fernet-fields GitHub](https://github.com/fernet/django-fernet-fields)
   
8. **django-two-factor-auth:**
   - [django-two-factor-auth Documentation](https://django-two-factor-auth.readthedocs.io/en/stable/)
   
9. **Docker:**
   - [Docker Compose Documentation](https://docs.docker.com/compose/)
   
10. **Kubernetes:**
    - [Kubernetes Security](https://kubernetes.io/docs/concepts/security/overview/)

```

Contents of .env:
```
DB_ENGINE=django.db.backends.postgresql
DB_NAME=DB2
DB_USER=postgres
DB_PASSWORD=
DB_HOST=localhost
DB_PORT=5432

```

Contents of manage.py:
```
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

Contents of app/models.py:
```
# app/models.py
from django.db import models
from django.core.exceptions import ValidationError

class Role(models.Model):
    id = models.AutoField(primary_key=True, db_column='ID')
    name = models.CharField(max_length=20, unique=True, db_column='Name')

    class Meta:
        db_table = 'Role'
        verbose_name = 'Роль'
        verbose_name_plural = 'Роли'

    def __str__(self):
        return self.name

class AppUser(models.Model):
    id = models.AutoField(primary_key=True, db_column='ID')
    is_active = models.BooleanField(default=True, db_column='Is Active')
    full_name = models.CharField(max_length=255, db_column='Full Name')
    email = models.EmailField(max_length=254, unique=True, db_column='Email')
    age = models.PositiveIntegerField(db_column='Age')
    role = models.ForeignKey('Role', on_delete=models.CASCADE, db_column='Role_ID')

    class Meta:
        db_table = 'User'
        verbose_name = 'Пользователь'
        verbose_name_plural = 'Пользователи'

    def clean(self):
        if self.age <= 0:
            raise ValidationError({'age': 'Возраст должен быть положительным числом.'})

class Employee(models.Model):
    id = models.AutoField(primary_key=True, db_column='ID')
    is_active = models.BooleanField(default=True, db_column='Is Active')
    full_name = models.CharField(max_length=255, db_column='Full Name')
    years_of_experience = models.PositiveIntegerField(db_column='Years of Experience')
    position = models.CharField(max_length=255, db_column='Position')
    salary = models.DecimalField(max_digits=10, decimal_places=2, db_column='Salary')
    age = models.PositiveIntegerField(db_column='Age')
    photo = models.ImageField(null=True, blank=True, upload_to='employee_photos/', db_column='Photo')

    class Meta:
        db_table = 'Employee'
        verbose_name = 'Сотрудник'
        verbose_name_plural = 'Сотрудники'

    def clean(self):
        errors = {}
        if self.age <= 0:
            errors['age'] = 'Возраст должен быть положительным числом.'
        if self.years_of_experience < 0:
            errors['years_of_experience'] = 'Стаж работы не может быть отрицательным.'
        if self.salary < 0:
            errors['salary'] = 'Зарплата не может быть отрицательной.'
        if self.years_of_experience > self.age:
            errors['years_of_experience'] = 'Стаж работы не может превышать возраст.'
        if errors:
            raise ValidationError(errors)

class Test(models.Model):
    id = models.AutoField(primary_key=True, db_column='ID')
    title = models.CharField(max_length=255, db_column='Title')
    passing_score = models.PositiveIntegerField(db_column='Passing Score')
    description = models.TextField(null=True, blank=True, db_column='Description')
    time_to_complete = models.PositiveIntegerField(db_column='Time to Complete')

    class Meta:
        db_table = 'Test'
        verbose_name = 'Тест'
        verbose_name_plural = 'Тесты'

    def clean(self):
        errors = {}
        if self.passing_score < 0:
            errors['passing_score'] = 'Проходной балл не может быть отрицательным.'
        if self.time_to_complete <= 0:
            errors['time_to_complete'] = 'Время на прохождение должно быть положительным числом.'
        if errors:
            raise ValidationError(errors)

class Question(models.Model):
    id = models.AutoField(primary_key=True, db_column='ID')
    test = models.ForeignKey('Test', on_delete=models.CASCADE, db_column='Test ID')
    question_text = models.TextField(db_column='Question Text')
    image = models.BinaryField(null=True, blank=True, db_column='Image for the Question')

    class Meta:
        db_table = 'Question'
        verbose_name = 'Вопрос'
        verbose_name_plural = 'Вопросы'

class Answer(models.Model):
    id = models.AutoField(primary_key=True, db_column='ID')
    question = models.ForeignKey('Question', on_delete=models.CASCADE, db_column='Question ID')
    answer_text = models.TextField(db_column='Answer Text')
    is_correct = models.BooleanField(db_column='Correct Answer')
    image = models.BinaryField(null=True, blank=True, db_column='Image for the Answer')

    class Meta:
        db_table = 'Answer'
        verbose_name = 'Ответ'
        verbose_name_plural = 'Ответы'

class TestResult(models.Model):
    id = models.AutoField(primary_key=True, db_column='ID')
    user = models.ForeignKey('AppUser', on_delete=models.CASCADE, db_column='User ID')
    test = models.ForeignKey('Test', on_delete=models.CASCADE, db_column='Test ID')
    employee = models.ForeignKey('Employee', on_delete=models.CASCADE, db_column='Employee ID')
    test_date = models.DateField(db_column='Test Date')
    score_achieved = models.PositiveIntegerField(db_column='Score Achieved')
    status = models.CharField(max_length=20, db_column='Status')
    attempt_number = models.PositiveIntegerField(db_column='Attempt Number')

    class Meta:
        db_table = 'TestResult'
        verbose_name = 'Результат Теста'
        verbose_name_plural = 'Результаты Тестов'

    def clean(self):
        errors = {}
        if self.status not in ['passed', 'failed', 'in_progress']:
            errors['status'] = 'Недопустимое значение статуса.'
        # Проверка, что набранный балл не превышает количество вопросов в тесте
        num_questions = Question.objects.filter(test=self.test).count()
        if self.score_achieved > num_questions:
            errors['score_achieved'] = 'Набранный балл не может превышать количество вопросов в тесте.'
        if self.attempt_number <= 0:
            errors['attempt_number'] = 'Номер попытки должен быть положительным числом.'
        if errors:
            raise ValidationError(errors)

```

Contents of app/serializers.py:
```
# app/serializers.py
from rest_framework import serializers

class UserSerializer(serializers.Serializer):
    ID = serializers.IntegerField()
    Full_Name = serializers.CharField(max_length=255, source='Full Name')
    Email = serializers.EmailField()
    Age = serializers.IntegerField()

class EmployeeSerializer(serializers.Serializer):
    ID = serializers.IntegerField()
    Full_Name = serializers.CharField(max_length=255, source='Full Name')
    Years_of_Experience = serializers.IntegerField(source='Years of Experience')
    Position = serializers.CharField(max_length=255)
    Salary = serializers.DecimalField(max_digits=10, decimal_places=2)
    Age = serializers.IntegerField()
    Photo = serializers.CharField(allow_null=True, required=False)

```

Contents of app/__init__.py:
```

```

Contents of app/apps.py:
```
from django.apps import AppConfig


class AppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'app'

```

Contents of app/forms.py:
```
# app/forms.py
from django import forms
from .models import AppUser, Employee

class UserSelectionForm(forms.Form):
    user = forms.ModelChoiceField(
        queryset=AppUser.objects.all(),
        label='Выберите пользователя',
        widget=forms.Select(attrs={'class': 'form-control'})
    )

class EmployeeForm(forms.ModelForm):
    class Meta:
        model = Employee
        fields = ['full_name', 'years_of_experience', 'position', 'salary', 'age', 'photo', 'is_active']
        widgets = {
            'full_name': forms.TextInput(attrs={'class': 'form-control'}),
            'years_of_experience': forms.NumberInput(attrs={'class': 'form-control'}),
            'position': forms.TextInput(attrs={'class': 'form-control'}),
            'salary': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.01'}),
            'age': forms.NumberInput(attrs={'class': 'form-control'}),
            'photo': forms.ClearableFileInput(attrs={'class': 'form-control-file'}),
            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }

class AppUserForm(forms.ModelForm):
    class Meta:
        model = AppUser
        fields = ['full_name', 'email', 'age', 'is_active']
        widgets = {
            'full_name': forms.TextInput(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
            'age': forms.NumberInput(attrs={'class': 'form-control'}),
            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }

```

Contents of app/context_processors.py:
```
# app/context_processors.py

from .views import get_current_user

def add_role_and_user_id(request):
    app_user, role_name = get_current_user(request)
    return {
        'role': role_name,
        'user_id': app_user.id if app_user else None,
    }

```

Contents of app/admin.py:
```
from django.contrib import admin

```

Contents of app/tests.py:
```
from django.test import TestCase

# Create your tests here.

```

Contents of app/urls.py:
```
# app/urls.py

from django.urls import path
from . import views

urlpatterns = [
    # Web Views
    path('', views.index, name='index'),
    path('set_user/', views.set_user, name='set_user'),
    path('users/', views.user_list, name='user_list'),
    path('users/<int:user_id>/', views.user_detail, name='user_detail'),
    path('users/delete/<int:user_id>/', views.delete_user, name='delete_user'),  # Добавлено
    path('employees/', views.employee_list, name='employee_list'),
    path('employees/<int:employee_id>/', views.employee_detail, name='employee_detail'),
    path('employees/delete/<int:employee_id>/', views.delete_employee, name='delete_employee'),  # Добавлено
    path('users/add/', views.add_user, name='add_user'),
    path('employees/add/', views.add_employee, name='add_employee'),

    # API Views
    path('api/users/', views.UserListAPI.as_view(), name='api_user_list'),
    path('api/users/<int:user_id>/', views.UserDetailAPI.as_view(), name='api_user_detail'),
    path('api/employees/', views.EmployeeListAPI.as_view(), name='api_employee_list'),
    path('api/employees/<int:employee_id>/', views.EmployeeDetailAPI.as_view(), name='api_employee_detail'),
]

```

Contents of app/filters.py:
```
# filters.py

import django_filters

```

Contents of app/views.py:
```
# app/views.py

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.http import HttpResponse
from django.core.exceptions import ValidationError
from .models import AppUser, Employee, Role
from django.core.paginator import Paginator
from .forms import AppUserForm, EmployeeForm, UserSelectionForm

# DRF импорты
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .serializers import UserSerializer, EmployeeSerializer

def get_current_user(request):
    user_id = request.session.get('user_id')
    if not user_id:
        return None, None
    try:
        app_user = AppUser.objects.get(id=user_id)
        role_name = app_user.role.name if app_user.role else None
        return app_user, role_name
    except AppUser.DoesNotExist:
        return None, None

def login_required(view_func):
    def _wrapped_view(request, *args, **kwargs):
        app_user, role_name = get_current_user(request)
        if not app_user:
            return redirect('set_user')
        return view_func(request, *args, **kwargs)
    return _wrapped_view

def index(request):
    app_user, role_name = get_current_user(request)
    if not app_user:
        return redirect('set_user')
    return render(request, 'index.html', {'role': role_name, 'user_id': app_user.id, 'app_user': app_user})

def set_user(request):
    if request.method == 'POST':
        form = UserSelectionForm(request.POST)
        if form.is_valid():
            app_user = form.cleaned_data['user']
            request.session['user_id'] = app_user.id
            messages.success(request, f'Вы вошли как {app_user.full_name}')
            return redirect('index')
    else:
        form = UserSelectionForm()
    return render(request, 'set_user.html', {'form': form})

@login_required
def user_list(request):
    app_user, role_name = get_current_user(request)
    if role_name != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    search_query = request.GET.get('search', '')
    sort_by = request.GET.get('sort', 'id')
    order = request.GET.get('order', 'asc')

    user_list = AppUser.objects.filter(
        models.Q(full_name__icontains=search_query) | models.Q(email__icontains=search_query)
    )
    if order == 'desc':
        sort_by = '-' + sort_by
    user_list = user_list.order_by(sort_by)

    paginator = Paginator(user_list, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'user_list.html', {
        'page_obj': page_obj,
        'role': role_name
    })

@login_required
def user_detail(request, user_id):
    app_user, role_name = get_current_user(request)
    if not app_user:
        return redirect('set_user')

    target_user = get_object_or_404(AppUser, id=user_id)

    if role_name != 'admin' and app_user.id != target_user.id:
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    if request.method == 'POST':
        form = AppUserForm(request.POST, instance=target_user)
        if form.is_valid():
            form.save()
            messages.success(request, 'Данные пользователя обновлены')
            return redirect('user_detail', user_id=user_id)
    else:
        form = AppUserForm(instance=target_user)

    return render(request, 'user_detail.html', {
        'form': form,
        'app_user': target_user,
        'role': role_name
    })

@login_required
def employee_list(request):
    app_user, role_name = get_current_user(request)
    if role_name not in ['admin', 'employee']:
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    search_query = request.GET.get('search', '')
    sort_by = request.GET.get('sort', 'id')
    order = request.GET.get('order', 'asc')

    if role_name == 'admin':
        employee_list = Employee.objects.filter(full_name__icontains=search_query)
    elif role_name == 'employee':
        # Сотрудник видит только себя
        employee_list = Employee.objects.filter(id=app_user.id)
    else:
        employee_list = Employee.objects.none()

    if order == 'desc':
        sort_by = '-' + sort_by
    employee_list = employee_list.order_by(sort_by)

    paginator = Paginator(employee_list, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'employee_list.html', {
        'page_obj': page_obj,
        'role': role_name
    })

@login_required
def employee_detail(request, employee_id):
    app_user, role_name = get_current_user(request)

    employee = get_object_or_404(Employee, id=employee_id)

    # Проверка доступа
    if role_name == 'admin':
        # Администратор имеет доступ ко всем данным
        pass
    elif role_name == 'employee':
        # Сотрудник может просматривать и редактировать только свой профиль
        if employee.id != app_user.id:
            return HttpResponse('У вас нет доступа к этой странице', status=403)
    else:
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    if request.method == 'POST':
        form = EmployeeForm(request.POST, request.FILES, instance=employee)
        if form.is_valid():
            form.save()
            messages.success(request, 'Данные сотрудника обновлены')
            return redirect('employee_detail', employee_id=employee_id)
    else:
        form = EmployeeForm(instance=employee)

    return render(request, 'employee_detail.html', {
        'form': form,
        'employee': employee,
        'role': role_name
    })

@login_required
def add_user(request):
    app_user, role_name = get_current_user(request)
    if role_name != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    if request.method == 'POST':
        form = AppUserForm(request.POST)
        if form.is_valid():
            new_user = form.save(commit=False)
            role_user = Role.objects.get(name='user')
            new_user.role = role_user
            new_user.save()
            messages.success(request, 'Новый пользователь добавлен')
            return redirect('user_list')
    else:
        form = AppUserForm()

    return render(request, 'add_user.html', {'form': form})

@login_required
def add_employee(request):
    app_user, role_name = get_current_user(request)
    if role_name != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    if request.method == 'POST':
        form = EmployeeForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            messages.success(request, 'Новый сотрудник добавлен')
            return redirect('employee_list')
    else:
        form = EmployeeForm()

    return render(request, 'add_employee.html', {'form': form})

@login_required
def delete_user(request, user_id):
    app_user, role_name = get_current_user(request)
    if role_name != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    target_user = get_object_or_404(AppUser, id=user_id)
    target_user.delete()
    messages.success(request, 'Пользователь удалён')
    return redirect('user_list')

@login_required
def delete_employee(request, employee_id):
    app_user, role_name = get_current_user(request)
    if role_name != 'admin':
        return HttpResponse('У вас нет доступа к этой странице', status=403)

    employee = get_object_or_404(Employee, id=employee_id)
    employee.delete()
    messages.success(request, 'Сотрудник удалён')
    return redirect('employee_list')

# API Views

class UserListAPI(APIView):
    def get(self, request):
        app_users = AppUser.objects.all()
        serializer = UserSerializer(app_users, many=True)
        return Response(serializer.data)

class UserDetailAPI(APIView):
    def get(self, request, user_id):
        try:
            app_user = AppUser.objects.get(id=user_id)
            serializer = UserSerializer(app_user)
            return Response(serializer.data)
        except AppUser.DoesNotExist:
            return Response({'error': 'Пользователь не найден'}, status=status.HTTP_404_NOT_FOUND)

class EmployeeListAPI(APIView):
    def get(self, request):
        employees = Employee.objects.all()
        serializer = EmployeeSerializer(employees, many=True)
        return Response(serializer.data)

class EmployeeDetailAPI(APIView):
    def get(self, request, employee_id):
        try:
            employee = Employee.objects.get(id=employee_id)
            serializer = EmployeeSerializer(employee)
            return Response(serializer.data)
        except Employee.DoesNotExist:
            return Response({'error': 'Сотрудник не найден'}, status=status.HTTP_404_NOT_FOUND)

```

Contents of app/templatetags/__init__.py:
```

```

Contents of app/templatetags/app_extras.py:
```
# app/templatetags/app_extras.py
from django import template
import base64

register = template.Library()

@register.filter
def b64encode(value):
    return base64.b64encode(value).decode('utf-8')

@register.filter
def to(value, arg):
    return range(value, arg+1)

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)

```

Contents of app/migrations/__init__.py:
```

```

Contents of app/migrations/0002_appuser_is_active_employee_is_active.py:
```
# Generated by Django 4.2.16 on 2024-11-27 04:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='appuser',
            name='is_active',
            field=models.BooleanField(db_column='Is Active', default=True),
        ),
        migrations.AddField(
            model_name='employee',
            name='is_active',
            field=models.BooleanField(db_column='Is Active', default=True),
        ),
    ]

```

Contents of app/migrations/0003_auto_20241127_0421.py:
```
# app/migrations/0003_auto_add_roles.py
from django.db import migrations

def add_roles(apps, schema_editor):
    Role = apps.get_model('app', 'Role')
    Role.objects.create(name='admin')
    Role.objects.create(name='user')
    Role.objects.create(name='employee')

class Migration(migrations.Migration):

    dependencies = [
        ('app', '0002_appuser_is_active_employee_is_active'),
    ]

    operations = [
        migrations.RunPython(add_roles),
    ]

```

Contents of app/migrations/0001_initial.py:
```
# Generated by Django 4.2.16 on 2024-11-27 03:49

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('full_name', models.CharField(db_column='Full Name', max_length=255)),
                ('email', models.EmailField(db_column='Email', max_length=254, unique=True)),
                ('age', models.PositiveIntegerField(db_column='Age')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('full_name', models.CharField(db_column='Full Name', max_length=255)),
                ('years_of_experience', models.PositiveIntegerField(db_column='Years of Experience')),
                ('position', models.CharField(db_column='Position', max_length=255)),
                ('salary', models.DecimalField(db_column='Salary', decimal_places=2, max_digits=10)),
                ('age', models.PositiveIntegerField(db_column='Age')),
                ('photo', models.ImageField(blank=True, db_column='Photo', null=True, upload_to='employee_photos/')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
                'db_table': 'Employee',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=20, unique=True)),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': 'Role',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=255)),
                ('passing_score', models.PositiveIntegerField(db_column='Passing Score')),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('time_to_complete', models.PositiveIntegerField(db_column='Time to Complete')),
            ],
            options={
                'verbose_name': 'Тест',
                'verbose_name_plural': 'Тесты',
                'db_table': 'Test',
            },
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('test_date', models.DateField(db_column='Test Date')),
                ('score_achieved', models.PositiveIntegerField(db_column='Score Achieved')),
                ('status', models.CharField(db_column='Status', max_length=20)),
                ('attempt_number', models.PositiveIntegerField(db_column='Attempt Number')),
                ('employee', models.ForeignKey(db_column='Employee ID', on_delete=django.db.models.deletion.CASCADE, to='app.employee')),
                ('test', models.ForeignKey(db_column='Test ID', on_delete=django.db.models.deletion.CASCADE, to='app.test')),
                ('user', models.ForeignKey(db_column='User ID', on_delete=django.db.models.deletion.CASCADE, to='app.appuser')),
            ],
            options={
                'verbose_name': 'Результат Теста',
                'verbose_name_plural': 'Результаты Тестов',
                'db_table': 'TestResult',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('question_text', models.TextField(db_column='Question Text')),
                ('image', models.BinaryField(blank=True, db_column='Image for the Question', null=True)),
                ('test', models.ForeignKey(db_column='Test ID', on_delete=django.db.models.deletion.CASCADE, to='app.test')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
                'db_table': 'Question',
            },
        ),
        migrations.AddField(
            model_name='appuser',
            name='role',
            field=models.ForeignKey(db_column='Role_ID', on_delete=django.db.models.deletion.CASCADE, to='app.role'),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('answer_text', models.TextField(db_column='Answer Text')),
                ('is_correct', models.BooleanField(db_column='Correct Answer')),
                ('image', models.BinaryField(blank=True, db_column='Image for the Answer', null=True)),
                ('question', models.ForeignKey(db_column='Question ID', on_delete=django.db.models.deletion.CASCADE, to='app.question')),
            ],
            options={
                'verbose_name': 'Ответ',
                'verbose_name_plural': 'Ответы',
                'db_table': 'Answer',
            },
        ),
    ]

```

Contents of app/templates/add_employee.html:
```
<!-- app/templates/add_employee.html -->
{% extends 'base.html' %}

{% block title %}Добавить сотрудника{% endblock %}

{% block content %}
<div class="card mx-auto" style="max-width: 600px;">
    <div class="card-body">
        <h1 class="card-title">Добавить сотрудника</h1>

        {% if errors %}
            <div class="alert alert-danger">
                <ul>
                    {% for field, error_list in errors.items %}
                        {% for error in error_list %}
                            <li>{{ error }}</li>
                        {% endfor %}
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

        <form method="post" enctype="multipart/form-data">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit" class="btn btn-primary">Добавить сотрудника</button>
        </form>
    </div>
</div>
{% endblock %}

```

Contents of app/templates/employee_list.html:
```
<!-- app/templates/employee_list.html -->
{% extends 'base.html' %}

{% block title %}Список сотрудников{% endblock %}

{% block content %}
<h1>Список сотрудников</h1>
{% if role == 'admin' %}
    <a href="{% url 'add_employee' %}" class="btn btn-success mb-3">Добавить сотрудника</a>
{% endif %}

<!-- Форма фильтрации -->
<form method="get" class="form-inline mb-3">
    <div class="form-group mr-2">
        <input type="text" name="search" class="form-control" placeholder="Поиск по имени" value="{{ request.GET.search }}">
    </div>
    <button type="submit" class="btn btn-outline-primary">Поиск</button>
</form>

<table class="table table-hover" id="employee-table">
    <thead class="thead-light">
        <tr>
            <!-- Остальной код остаётся без изменений -->
        </tr>
    </thead>
    <tbody>
        <!-- Остальной код остаётся без изменений -->
    </tbody>
</table>

<!-- Пагинация -->
<nav aria-label="Навигация по страницам">
    <ul class="pagination justify-content-center">
        <!-- Остальной код остаётся без изменений -->
    </ul>
</nav>

<!-- Контекстное меню -->
<!-- Остальной код остаётся без изменений -->

{% endblock %}

{% block extra_css %}
<style>
.context-menu {
    display: none;
    position: absolute;
    z-index: 1000;
    background: #fff;
    border: 1px solid #ccc;
}

.context-menu ul {
    list-style: none;
    padding: 5px 0;
    margin: 0;
}

.context-menu ul li {
    padding: 5px 20px;
    cursor: pointer;
}

.context-menu ul li:hover {
    background-color: #eee;
}
</style>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const table = document.getElementById('employee-table');
    const contextMenu = document.getElementById('context-menu');
    let selectedEmployeeId = null;

    table.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        const targetRow = e.target.closest('tr[data-employee-id]');
        if (targetRow) {
            selectedEmployeeId = targetRow.getAttribute('data-employee-id');
            contextMenu.style.top = e.pageY + 'px';
            contextMenu.style.left = e.pageX + 'px';
            contextMenu.style.display = 'block';
        }
    });

    document.addEventListener('click', function(e) {
        if (!e.target.closest('#context-menu')) {
            contextMenu.style.display = 'none';
        }
    });

    contextMenu.addEventListener('click', function(e) {
        const action = e.target.getAttribute('data-action');
        if (action && selectedEmployeeId) {
            if (action === 'view') {
                window.location.href = '{% url "employee_detail" 0 %}'.replace('0', selectedEmployeeId);
            } else if (action === 'edit') {
                window.location.href = '{% url "employee_detail" 0 %}'.replace('0', selectedEmployeeId);
            } else if (action === 'delete') {
                if (confirm('Вы уверены, что хотите удалить этого сотрудника?')) {
                    window.location.href = '{% url "delete_employee" 0 %}'.replace('0', selectedEmployeeId);
                }
            }
            contextMenu.style.display = 'none';
        }
    });
});
</script>
{% endblock %}

```

Contents of app/templates/index.html:
```
<!-- app/templates/index.html -->
{% extends 'base.html' %}

{% block title %}Главная{% endblock %}

{% block content %}
<div class="jumbotron">
    <h1 class="display-4">Добро пожаловать, {{ app_user.full_name }}</h1>
    <p class="lead">Вы вошли как {{ app_user.full_name }}.</p>
    <hr class="my-4">
    {% if role == 'admin' %}
        <p>Используйте меню навигации для управления пользователями и сотрудниками.</p>
    {% else %}
        <p>Вы можете просмотреть и изменить свой профиль.</p>
    {% endif %}
</div>
{% endblock %}

```

Contents of app/templates/base.html:
```
<!-- app/templates/base.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Мое приложение{% endblock %}</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Дополнительные стили -->
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Навигационная панель -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="{% url 'index' %}">Мое приложение</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"     aria-controls="navbarNav" aria-expanded="false" aria-label="Переключить навигацию">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item {% if request.resolver_match.url_name == 'index' %}active{% endif %}">
                    <a class="nav-link" href="{% url 'index' %}">Главная</a>
                </li>
                {% if role == 'admin' %}
                    <li class="nav-item {% if request.resolver_match.url_name == 'user_list' %}active{% endif %}">
                        <a class="nav-link" href="{% url 'user_list' %}">Пользователи</a>
                    </li>
                    <li class="nav-item {% if request.resolver_match.url_name == 'employee_list' %}active{% endif %}">
                        <a class="nav-link" href="{% url 'employee_list' %}">Сотрудники</a>
                    </li>
                {% elif role == 'user' %}
                    {% if user_id %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'user_detail' user_id %}">Мой профиль</a>
                        </li>
                    {% endif %}
                {% endif %}
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'set_user' %}">Сменить пользователя</a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Основное содержимое -->
    <div class="container mt-4">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Закрыть">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            {% endfor %}
        {% endif %}
        {% block content %}
        {% endblock %}
    </div>

    <!-- Футер -->
    <footer class="bg-light text-center text-lg-start mt-auto">
        <div class="container p-4">
            <p class="text-muted">&copy; 2024 Мое приложение</p>
        </div>
    </footer>

    <!-- Bootstrap JS и зависимости (jQuery и Popper.js) -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-Df...+" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-...+" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" integrity="sha384-...+" crossorigin="anonymous"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>

```

Contents of app/templates/set_user.html:
```
<!-- app/templates/set_user.html -->
{% extends 'base.html' %}

{% block title %}Выбрать пользователя{% endblock %}

{% block content %}
<div class="card mx-auto" style="max-width: 500px;">
    <div class="card-body">
        <h2 class="card-title">Выберите пользователя</h2>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ form.user.label_tag }}
                {{ form.user }}
            </div>
            <button type="submit" class="btn btn-primary">Войти</button>
        </form>
    </div>
</div>
{% endblock %}

```

Contents of app/templates/user_detail.html:
```
<!-- app/templates/user_detail.html -->
{% extends 'base.html' %}

{% block title %}Детали пользователя{% endblock %}

{% block content %}
<div class="card mx-auto" style="max-width: 600px;">
    <div class="card-body">
        <h1 class="card-title">Детали пользователя</h1>

        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <a href="{% url 'user_list' %}" class="btn btn-secondary">Назад к списку пользователей</a>
        </form>
    </div>
</div>
{% endblock %}

```

Contents of app/templates/add_user.html:
```
<!-- app/templates/add_user.html -->
{% extends 'base.html' %}

{% block title %}Добавить пользователя{% endblock %}

{% block content %}
<div class="card mx-auto" style="max-width: 600px;">
    <div class="card-body">
        <h1 class="card-title">Добавить пользователя</h1>
        {% if errors %}
            <div class="alert alert-danger">
                <ul>
                    {% for field, error_list in errors.items %}
                        {% for error in error_list %}
                            <li>{{ error }}</li>
                        {% endfor %}
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit" class="btn btn-primary">Добавить пользователя</button>
        </form>
    </div>
</div>
{% endblock %}

```

Contents of app/templates/employee_detail.html:
```
<!-- app/templates/employee_detail.html -->
{% extends 'base.html' %}

{% block title %}Детали сотрудника{% endblock %}

{% block content %}
<div class="card mx-auto" style="max-width: 600px;">
    <div class="card-body">
        <h1 class="card-title">Детали сотрудника</h1>

        <form method="post" enctype="multipart/form-data">
            {% csrf_token %}
            {{ form.as_p }}
            {% if employee.photo %}
                <div class="mb-3">
                    <img src="{{ employee.photo.url }}" alt="Фотография сотрудника" class="img-thumbnail" style="max-width: 200px;">
                </div>
            {% endif %}
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <a href="{% url 'employee_list' %}" class="btn btn-secondary">Назад к списку сотрудников</a>
        </form>
    </div>
</div>
{% endblock %}

```

Contents of app/templates/user_list.html:
```
<!-- app/templates/user_list.html -->
{% extends 'base.html' %}

{% block title %}Список пользователей{% endblock %}

{% block content %}
<h1>Список пользователей</h1>
{% if role == 'admin' %}
    <a href="{% url 'add_user' %}" class="btn btn-success mb-3">Добавить пользователя</a>
{% endif %}

<!-- Форма фильтрации -->
<form method="get" class="form-inline mb-3">
    <div class="form-group mr-2">
        <input type="text" name="search" class="form-control" placeholder="Поиск по имени или email" value="{{ request.GET.search }}">
    </div>
    <button type="submit" class="btn btn-outline-primary">Поиск</button>
</form>

<table class="table table-hover" id="user-table">
    <thead class="thead-light">
        <tr>
            <!-- Остальной код остаётся без изменений -->
        </tr>
    </thead>
    <tbody>
        <!-- Остальной код остаётся без изменений -->
    </tbody>
</table>

<!-- Пагинация -->
<nav aria-label="Навигация по страницам">
    <ul class="pagination justify-content-center">
        <!-- Остальной код остаётся без изменений -->
    </ul>
</nav>

<!-- Контекстное меню -->
<!-- Остальной код остаётся без изменений -->

{% endblock %}

{% block extra_css %}
<style>
.context-menu {
    display: none;
    position: absolute;
    z-index: 1000;
    background: #fff;
    border: 1px solid #ccc;
}

.context-menu ul {
    list-style: none;
    padding: 5px 0;
    margin: 0;
}

.context-menu ul li {
    padding: 5px 20px;
    cursor: pointer;
}

.context-menu ul li:hover {
    background-color: #eee;
}
</style>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const table = document.getElementById('user-table');
    const contextMenu = document.getElementById('context-menu');
    let selectedUserId = null;

    table.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        const targetRow = e.target.closest('tr[data-user-id]');
        if (targetRow) {
            selectedUserId = targetRow.getAttribute('data-user-id');
            contextMenu.style.top = e.pageY + 'px';
            contextMenu.style.left = e.pageX + 'px';
            contextMenu.style.display = 'block';
        }
    });

    document.addEventListener('click', function(e) {
        if (!e.target.closest('#context-menu')) {
            contextMenu.style.display = 'none';
        }
    });

    contextMenu.addEventListener('click', function(e) {
        const action = e.target.getAttribute('data-action');
        if (action && selectedUserId) {
            if (action === 'view') {
                window.location.href = '{% url "user_detail" 0 %}'.replace('0', selectedUserId);
            } else if (action === 'edit') {
                window.location.href = '{% url "user_detail" 0 %}'.replace('0', selectedUserId);
            } else if (action === 'delete') {
                if (confirm('Вы уверены, что хотите удалить этого пользователя?')) {
                    window.location.href = '{% url "delete_user" 0 %}'.replace('0', selectedUserId);
                }
            }
            contextMenu.style.display = 'none';
        }
    });
});
</script>
{% endblock %}

```

Contents of myproject/asgi.py:
```
"""
ASGI config for myproject project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_asgi_application()

```

Contents of myproject/__init__.py:
```

```

Contents of myproject/settings.py:
```
"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8pxo2$10!u8+1@w0bb3i&%o49#)wt!t99qnetr)^3n1p7%p@!c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'bootstrap4',
    'app',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app.context_processors.add_role_and_user_id',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DB_NAME', 'DB'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}




# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'  # Перенаправление после успешного входа
LOGOUT_REDIRECT_URL = '/login/'  # Перенаправление после выхода

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
#AUTH_USER_MODEL = 'app.User'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

```

Contents of myproject/urls.py:
```
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('app.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

```

Contents of myproject/wsgi.py:
```
"""
WSGI config for myproject project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_wsgi_application()

```

Contents of media/answer_images/4eb2b2b6962f9815f60feb4c27c84cd0.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/question4.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/photo_2024-10-16_17-27-22.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/question2.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/question3.jpg:
```
[Could not decode file contents]

```

Contents of media/question_images/question1.jpg:
```
[Could not decode file contents]

```

Contents of media/employee_photos/8dc817080af13b2aa733ea1c8ff606e6.jpg:
```
[Could not decode file contents]

```

